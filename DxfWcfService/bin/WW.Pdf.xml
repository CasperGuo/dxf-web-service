<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WW.Pdf</name>
    </assembly>
    <members>
        <member name="T:WW.Pdf.PdfDocument">
            <summary>
            Class representing a PDF document.
            </summary>
            <remarks>
            <para>
            A PDF document file is structured as follows: Header, body, cross reference section, trailer.
            PDF documents can contain additional updates: body, cross reference and trailer sections are then
            repeated, and object generation numbers increase.
            </para>
            </remarks>
        </member>
        <member name="M:WW.Pdf.PdfDocument.GetNextImageIndex">
            <summary>
            Gets the next image index.
            Used to get unique image ID's.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfDocument.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfDocument.Bodies">
            <summary>
            Gets the bodies.
            </summary>
            <remarks>
            Each body represents an update of the document.
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiKerningPairs.#ctor(WW.Pdf.Font.KerningPairs,WW.Pdf.Font.PdfUnitConverter)">
            <summary>
                Class constructor.
            </summary>
            <param name="pairs">Kerning pairs read from the TrueType font file.</param>
            <param name="converter">Class to convert from TTF to PDF units.</param>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiKerningPairs.HasPair(System.UInt16,System.UInt16)">
            <summary>
                Returns true if a kerning value exists for the supplied 
                character index pair.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiKerningPairs.Count">
            <summary>
                Gets the number of kerning pairs.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiKerningPairs.Item(System.UInt16,System.UInt16)">
            <summary>
                Gets the kerning amount for the supplied index pair or 0 if 
                a kerning pair does not exist.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.NameTable">
            <summary>
                Class that represents the Naming ('name') table
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/name.htm
            </remarks>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.FontTable">
            <summary>
                Class derived by all TrueType table classes.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.FontTable.directoryEntry">
            <summary>
                The dictionary entry for this table.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.FontTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Class constructor
            </summary>
            <param name="entry">Table directory entry.</param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.FontTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of a table from the current position in 
                the supplied stream.
            </summary>
            <param name="reader"></param>
            <exception cref="T:System.ArgumentException">
                If the supplied stream does not contain enough data.
            </exception>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.FontTable.Write(WW.Pdf.Font.FontFileWriter)">
            <summary>
                Writes the contents of a table to the supplied writer.
            </summary>
            <remarks>
                This method should not be concerned with aligning the 
                table output on the 4-byte boundary.
            </remarks>
            <param name="writer"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.FontTable.Entry">
            <summary>
                Gets or sets a directory entry for this table.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.FontTable.Name">
            <summary>
                Gets the unique name of this table as a 4-character string.
            </summary>
            <remarks>
                Note that some TrueType tables are only 3 characters long 
                (e.g. 'cvt').  In this case the returned string will be padded 
                with a extra space at the end of the string.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.FontTable.Tag">
            <summary>
                Gets the table name encoded as a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.NameTable.storageOffset">
            <summary>
                Offset to start of string storage (from start of table).
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.NameTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "name" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.NameTable.ReadString(WW.Pdf.Font.FontFileStream,System.Int32,System.Int32)">
            <summary>
                Reads a string from the storage area beginning at <i>offset</i>
                consisting of <i>length</i> bytes.  The returned string will be 
                converted using the Unicode encoding.
            </summary>
            <param name="stream">Big-endian font stream.</param>
            <param name="stringOffset">
                The offset in bytes from the beginning of the string storage area.
             </param>
            <param name="length">The length of the string in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.NameTable.Write(WW.Pdf.Font.FontFileWriter)">
            <summary>
                Not supported.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.NameTable.FamilyName">
            <summary>
                Get the font family name.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.NameTable.FullName">
            <summary>
                Gets the font full name composed of the family name and the 
                subfamily name.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.HeaderTable">
            <summary>
                Class that represents the Font Header table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/head.htm
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HeaderTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Class constructor.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HeaderTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "head" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HeaderTable.GetDate(System.Int64)">
            <summary>
                Returns a DateTime instance which is the result of adding <i>seconds</i>
                to BaseDate.  If an exception occurs, BaseDate is returned.
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HeaderTable.Write(WW.Pdf.Font.FontFileWriter)">
            <summary>
                Writes the contents of the head table to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.HeaderTable.IsShortFormat">
            <summary>
                Gets a value that indicates whether glyph offsets in the 
                loca table are stored as a ushort or ulong.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Base14.Base14Font">
            <summary>
                Base class for the standard 14 fonts as defined in the PDF spec.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Font">
            <summary>
                Base class for PDF font classes
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.IFontMetric.GetWidth(System.UInt16)">
            <summary>
                Gets the width of a character in 1/1000ths of a point size 
                located at the supplied codepoint.
            </summary>
            <remarks>
                For a type 1 font a code point is an octal code obtained from a 
                character encoding scheme (WinAnsiEncoding, MacRomanEncoding, etc).
                For example, the code point for the space character is 040 (octal).
                For a type 0 font a code point represents a GID (Glyph index).
            </remarks>
            <param name="charIndex">A character code point.</param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.IFontMetric.Ascender">
            <summary>
                Specifies the maximum distance characters in this font extend 
                above the base line. This is the typographic ascent for the font. 
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontMetric.Descender">
            <summary>
                Specifies the maximum distance characters in this font extend 
                below the base line. This is the typographic descent for the font. 
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontMetric.CapHeight">
            <summary>
                Gets the vertical coordinate of the top of flat captial letters.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontMetric.FirstChar">
            <summary>
                Gets the value of the first character used in the font
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontMetric.LastChar">
            <summary>
                Gets the value of the last character used in the font
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontMetric.Descriptor">
            <summary>
                Gets a reference to a font descriptor.  A descriptor is akin to 
                the PDF FontDescriptor object (see page 355 of PDF 1.4 spec).
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontMetric.Widths">
            <summary>
                Gets the widths of all characters in 1/1000ths of a point size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.Font.MapCharacter(System.Char)">
            <summary>
                Maps a Unicode character to a character index.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.Font.GetWidth(System.UInt16)">
            <summary>
                See <see cref="M:WW.Pdf.Font.IFontMetric.GetWidth(System.UInt16)"/>
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Font.CreateProxyFont(WW.Pdf.Font.FontProperties,WW.Pdf.Font.FontType)">
            <summary>
            Creates a proxy font for specified font properties and font type.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Font.Encoding">
            <summary>
                Get the encoding of the font.
            </summary>
            <remarks>
                A font encoding defines a mapping between a character code 
                and a code point.  
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.Font.FontName">
            <summary>
                Gets the base font name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.Font.Type">
            <summary>
                Gets the type of font, e.g. Type 0, Type 1, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.Font.SubType">
            <summary>
                Gets the font subtype.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.Font.Descriptor">
            <summary>
                Gets a reference to a FontDescriptor
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Font.MultiByteFont">
            <summary>
                Gets a boolean value indicating whether this font supports 
                multi-byte characters
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Font.Ascender">
            <summary>
                See <see cref="P:WW.Pdf.Font.IFontMetric.Ascender"/>
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Font.Descender">
            <summary>
                See <see cref="P:WW.Pdf.Font.IFontMetric.Descender"/>
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Font.CapHeight">
            <summary>
                See <see cref="P:WW.Pdf.Font.IFontMetric.CapHeight"/>
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Font.FirstChar">
            <summary>
                See <see cref="P:WW.Pdf.Font.IFontMetric.FirstChar"/>
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Font.LastChar">
            <summary>
                See <see cref="P:WW.Pdf.Font.IFontMetric.LastChar"/>
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Font.Widths">
            <summary>
                See <see cref="P:WW.Pdf.Font.IFontMetric.Widths"/>
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Base14.Base14Font.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],WW.Pdf.Font.CodePointMapping)">
            <summary>
                Class constructor.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Base14.Base14Font.Descriptor">
            <summary>
                Will always return null since the standard 14 fonts do not 
                have a FontDescriptor.
            </summary>
            <remarks>
                It is possible to override the default metrics, but the 
                current version of FO.NET does not support this feature.
            </remarks>
        </member>
        <member name="T:WW.Pdf.Filter.DctFilter">
            <summary>
            DCTDecode filter for PDF streams.
            Currently not supported.
            </summary>
        </member>
        <member name="T:WW.Pdf.IFilter">
            <summary>
            Represents a stream filter.
            </summary>
        </member>
        <member name="M:WW.Pdf.IFilter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
        </member>
        <member name="P:WW.Pdf.IFilter.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:WW.Pdf.IFilter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
        </member>
        <member name="P:WW.Pdf.IFilter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.DctFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Filter.DctFilter"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.DctFilter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Filter.DctFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.DctFilter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.DctFilter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:WW.Pdf.Components.PdfDocumentInformation">
            <summary>
            A PDF document information class.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfIndirectObject`1">
            <summary>
            A PDF indirect object wraps an <see cref="T:WW.Pdf.IPdfObject"/> and tags it with a number and generation with
            which it can be referenced through a <see cref="T:WW.Pdf.PdfReference"/> object.
            </summary>
        </member>
        <member name="T:WW.Pdf.IPdfIndirectObject">
            <summary>
            A PDF indirect object wraps an <see cref="T:WW.Pdf.IPdfObject"/> and tags it with a number and generation with
            which it can be referenced through a <see cref="T:WW.Pdf.PdfReference"/> object.
            </summary>
        </member>
        <member name="P:WW.Pdf.IPdfIndirectObject.Generation">
            <summary>
            Gets or sets the number.
            </summary>
            <remarks>
            The object number and <see cref="P:WW.Pdf.IPdfIndirectObject.Generation"/> uniquely identify an indirect object.
            </remarks>
            <seealso cref="P:WW.Pdf.IPdfIndirectObject.Generation"/>
        </member>
        <member name="P:WW.Pdf.IPdfIndirectObject.Number">
            <summary>
            Gets or sets the generation (starting at 0).
            </summary>
            <remarks>
            The object number and <see cref="P:WW.Pdf.IPdfIndirectObject.Generation"/> uniquely identify an indirect object.
            </remarks>
            <seealso cref="P:WW.Pdf.IPdfIndirectObject.Number"/>
        </member>
        <member name="P:WW.Pdf.IPdfIndirectObject.Value">
            <summary>
            Gets or sets the wrapped value.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfIndirectObject`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfIndirectObject`1"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfIndirectObject`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfIndirectObject`1"/> class.
            </summary>
            <param name="value">The initial value.</param>
        </member>
        <member name="P:WW.Pdf.PdfIndirectObject`1.Number">
            <summary>
            Gets or sets the number.
            </summary>
            <remarks>
            The object number and <see cref="P:WW.Pdf.PdfIndirectObject`1.Generation"/> uniquely identify an indirect object.
            </remarks>
            <seealso cref="P:WW.Pdf.PdfIndirectObject`1.Generation"/>
        </member>
        <member name="P:WW.Pdf.PdfIndirectObject`1.Generation">
            <summary>
            Gets or sets the generation (starting at 0).
            </summary>
            <remarks>
            The object number and <see cref="P:WW.Pdf.PdfIndirectObject`1.Generation"/> uniquely identify an indirect object.
            </remarks>
            <seealso cref="P:WW.Pdf.PdfIndirectObject`1.Number"/>
        </member>
        <member name="P:WW.Pdf.PdfIndirectObject`1.Value">
            <summary>
            Gets or sets the wrapped value.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfDocumentInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfDocumentInformation"/> class.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfDocumentInformation.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfDocumentInformation.Author">
            <summary>
            Gets or sets the author.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfDocumentInformation.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfDocumentInformation.Keywords">
            <summary>
            Gets or sets the keywords.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfDocumentInformation.Creator">
            <summary>
            Gets or sets the creator.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfDocumentInformation.Producer">
            <summary>
            Gets or sets the producer.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfDocumentInformation.CreationDate">
            <summary>
            Gets or sets the creation date.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfDocumentInformation.ModificationDate">
            <summary>
            Gets or sets the modification date.
            </summary>
        </member>
        <member name="T:WW.Pdf.Filter.AsciiHexFilter">
            <summary>
            ASCIIHexDecode filter for PDF streams.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.AsciiHexFilter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Filter.AsciiHexFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.AsciiHexFilter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.AsciiHexFilter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.Entries.DirectoryEntry">
            <summary>
                Represents an entry in the directory table
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.Entries.DirectoryEntry.MakeTable(WW.Pdf.Font.FontFileReader)">
            <summary>
                Gets an instance of an <see cref="T:WW.Pdf.Font.TrueType.FontTable"/> implementation that is 
                capable of parsing the table identified by <b>tab</b>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.DirectoryEntry.TableName">
            <summary>
                Returns the table tag as a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.DirectoryEntry.Tag">
            <summary>
                Gets the table tag encoded as an unsigned 32-bite integer.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.DirectoryEntry.Offset">
            <summary>
                Gets or sets a value that represents a <see cref="T:WW.Pdf.Font.TrueType.FontTable"/> 
                offset, i.e. the number of bytes from the beginning of the file.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.DirectoryEntry.Length">
            <summary>
                Gets or sets a value representing the number number of bytes
                a <see cref="T:WW.Pdf.Font.TrueType.FontTable"/> object occupies in a stream.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.DirectoryEntry.CheckSum">
            <summary>
                Gets or sets value that represents a checksum of a <see cref="T:WW.Pdf.Font.TrueType.FontTable"/>.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.ProxyFont">
            <summary>
                A proxy object that delegates all operations to a concrete 
                subclass of the Font class.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.IFontDescriptor">
            <summary>
                A font descriptor specifies metrics and other attributes of a 
                font, as distinct from the metrics of individual glyphs.
            </summary>
            <remarks>
                See page 355 of PDF 1.4 specification for more information.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.Flags">
            <summary>
                Gets a collection of flags providing various font characteristics.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.FontBBox">
            <summary>
                Gets the smallest rectangle that will encompass the shape that 
                would result if all glyhs of the font were placed with their 
                origins coincident.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.ItalicAngle">
            <summary>
                Gets the main italic angle of the font expressed in tenths of 
                a degree counterclockwise from the vertical.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.StemV">
            <summary>
                TODO: The thickness, measured horizontally, of the dominant vertical 
                stems of the glyphs in the font.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.HasKerningInfo">
            <summary>
                Gets a value that indicates whether this font has kerning support.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.IsEmbeddable">
            <summary>
                Gets a value that indicates whether this font program may be legally 
                embedded within a document.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.IsSubsettable">
            <summary>
                Gets a value that indicates whether this font program my be subsetted.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.FontData">
            <summary>
                Gets a byte array representing a font program to be embedded 
                in a document.
            </summary>
            <remarks>
                If <see cref="P:WW.Pdf.Font.IFontDescriptor.IsEmbeddable"/> is <b>false</b> it is acceptable 
                for this method to return null.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.IFontDescriptor.KerningInfo">
            <summary>
                Gets kerning information for this font.
            </summary>
            <remarks>
                If <see cref="P:WW.Pdf.Font.IFontDescriptor.HasKerningInfo"/> is <b>false</b> it is acceptable 
                for this method to return null.
            </remarks>
        </member>
        <member name="F:WW.Pdf.Font.ProxyFont.fontLoaded">
            <summary>
                Flag that indicates whether the underlying font has been loaded.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.ProxyFont.properties">
            <summary>
                Font details such as face name, bold and italic flags
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.ProxyFont.realFont">
            <summary>
                The font that does all the work.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.ProxyFont.fontType">
            <summary>
                Determines what type of "real" font to instantiate.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.ProxyFont.#ctor(WW.Pdf.Font.FontProperties,WW.Pdf.Font.FontType)">
            <summary>
                Class constructor.
            </summary>
            <param name="properties"></param>
            <param name="fontType"></param>
        </member>
        <member name="M:WW.Pdf.Font.ProxyFont.LoadIfNecessary">
            <summary>
                Loads the underlying font.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.ProxyFont.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.ProxyFont.RealFont">
            <summary>
                Gets the underlying font.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.GdiFontMetrics">
            <summary>
                Class that obtains OutlineTextMetrics for a TrueType font.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFontMetrics.GetFontData">
            <summary>
                Gets font metric data for a TrueType font or TrueType collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFontMetrics.GetWidths">
            <summary>
                Retrieves the widths, in PDF units, of consecutive glyphs.
            </summary>
            <returns>
                An array of integers whose size is equal to the number of glyphs 
                specified in the 'maxp' table.
                The width at location 0 is the width of glyph with index 0, 
                The width at location 1 is the width of glyph with index 1, 
                etc...
            </returns>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFontMetrics.GetAnsiWidths">
            <summary>
                Returns the width, in PDF units, of consecutive glyphs for the 
                WinAnsiEncoding only.
            </summary>
            <returns>An array consisting of 256 elements.</returns>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFontMetrics.MapCharacter(System.Char)">
            <summary>
                Translates the supplied character to a glyph index using the 
                currently selected font.
            </summary>
            <param name="c">A unicode character.</param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.FaceName">
            <summary>
                Retrieves the typeface name of the font that is selected into the 
                device context supplied to the GdiFontMetrics constructor. 
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.EmSquare">
            <summary>
                Specifies the number of logical units defining the x- or y-dimension 
                of the em square for this font.  The common value for EmSquare is 2048.
            </summary>
            <remarks>
                The number of units in the x- and y-directions are always the same 
                for an em square.) 
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.ItalicAngle">
            <summary>
                Gets the main italic angle of the font expressed in tenths of 
                a degree counterclockwise from the vertical.
            </summary>
            <remarks>
                Regular (roman) fonts have a value of zero. Italic fonts typically 
                have a negative italic angle (that is, they lean to the right). 
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.Ascent">
            <summary>
                Specifies the maximum distance characters in this font extend 
                above the base line. This is the typographic ascent for the font. 
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.Descent">
            <summary>
                Specifies the maximum distance characters in this font extend 
                below the base line. This is the typographic descent for the font. 
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.CapHeight">
            <summary>
                Gets the distance between the baseline and the approximate 
                height of uppercase letters.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.XHeight">
            <summary>
                Gets the distance between the baseline and the approximate 
                height of non-ascending lowercase letters.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.StemV">
            <summary>
                TODO: The thickness, measured horizontally, of the dominant vertical 
                stems of the glyphs in the font.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.FirstChar">
            <summary>
                Gets the value of the first character defined in the font
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.LastChar">
            <summary>
                Gets the value of the last character defined in the font
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.AverageWidth">
            <summary>
                Gets the average width of glyphs in a font.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.MaxWidth">
            <summary>
                Gets the maximum width of glyphs in a font.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.IsEmbeddable">
            <summary>
                Gets a value indicating whether the font can be legally embedded 
                within a document.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.IsSubsettable">
            <summary>
                Gets a value indicating whether the font can be legally subsetted.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.BoundingBox">
            <summary>
                Gets the font's bounding box.
            </summary>
            <remarks>
                This is the smallest rectangle enclosing the shape that would 
                result if all the glyphs of the font were placed with their 
                origins cooincident and then filled.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.Flags">
            <summary>
                Gets a collection of flags defining various characteristics of 
                a font (e.g. serif or sans-serif, symbolic, etc).
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.KerningPairs">
            <summary>
                Gets a collection of kerning pairs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontMetrics.AnsiKerningPairs">
            <summary>
                Gets a collection of kerning pairs for characters defined in 
                the WinAnsiEncoding scheme only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WW.Pdf.Font.BfEntry">
            <summary>
                A <see cref="T:WW.Pdf.Font.BfEntry"/> class can represent either a bfrange 
                or bfchar.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.BfEntry.#ctor(System.UInt16,System.UInt16)">
            <summary>
                Class constructor.
            </summary>
            <param name="startIndex"></param>
            <param name="unicodeValue"></param>
        </member>
        <member name="M:WW.Pdf.Font.BfEntry.IncrementEndIndex">
            <summary>
                Increments the end index by one.
            </summary>
            <remarks>
                Incrementing the end index turns this BfEntry into a bfrange.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.BfEntry.IsRange">
            <summary>
                Returns <b>true</b> if this BfEntry represents a glyph range, i.e.
                the start index is not equal to the end index.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.BfEntry.IsChar">
            <summary>
                Returns <b>true</b> if this BfEntry represents a bfchar entry, i.e.
                the start index is equal to the end index.
            </summary>
        </member>
        <member name="T:WW.Pdf.Security.Arc4">
            <summary>
            ARC4 is a fast, simple stream encryption algorithm that is
            compatible with RSA Security's RC4 algorithm.
            </summary>
        </member>
        <member name="M:WW.Pdf.Security.Arc4.Initialise(System.Byte[])">
            <summary>
                Initialises internal state from the passed key.
            </summary>
            <remarks>
                Can be called again with a new key to reuse an Arc4 instance.
            </remarks>
            <param name="key">The encryption key.</param>
        </member>
        <member name="M:WW.Pdf.Security.Arc4.Encrypt(System.Byte[],System.Byte[])">
            <summary>
                Encrypts or decrypts the passed byte array.
            </summary>
            <param name="dataIn">
                The data to be encrypted or decrypted.
            </param>
            <param name="dataOut">
                The location that the encrypted or decrypted data is to be placed.
                The passed array should be at least the same size as dataIn.
                It is permissible for the same array to be passed for both dataIn
                and dataOut.
            </param>
        </member>
        <member name="M:WW.Pdf.Security.Arc4.Arc4Byte">
            <summary>
                Generates a pseudorandom byte used to encrypt or decrypt.
            </summary>
        </member>
        <member name="T:WW.Pdf.Filter.Jbig2Filter">
            <summary>
            JBIG2Decode filter for PDF streams.
            Currently not supported.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.Jbig2Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Filter.Jbig2Filter"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.Jbig2Filter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Filter.Jbig2Filter.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.Jbig2Filter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.Jbig2Filter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:WW.Pdf.Font.PdfCIDFont">
            <summary>
            Data of a CID font.
            </summary>
            <remarks>
            Compare PDF 1.3 chapter 5.6.3.
            </remarks>
        </member>
        <member name="T:WW.Pdf.Font.PdfFont">
            <summary>
            A PDF font component.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.PdfFont.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Font.PdfFont"/> class.
            </summary>
            <param name="baseFont">The base font.</param>
            <param name="subtype">Font sub type.</param>
        </member>
        <member name="M:WW.Pdf.Font.PdfFont.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Font.PdfFont"/> class.
            </summary>
            <param name="name">Font name.</param>
            <param name="baseFont">The base font.</param>
            <param name="subtype">Font sub type.</param>
        </member>
        <member name="P:WW.Pdf.Font.PdfFont.Subtype">
            <summary>
            Gets or sets the subtype.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.PdfFont.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.PdfFont.BaseFont">
            <summary>
            Gets or sets the base font.
            </summary>
            <remarks>
            "Times New Roman" becomes "TimesNewRoman" in PDF.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.PdfFont.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfIndirectObject">
            <summary>
            A PDF indirect object wraps an <see cref="T:WW.Pdf.IPdfObject"/> and tags it with a number and generation with
            which it can be referenced through a <see cref="T:WW.Pdf.PdfReference"/> object.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfIndirectObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfIndirectObject"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfIndirectObject.#ctor(WW.Pdf.IPdfObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfIndirectObject"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfContents.#ctor(WW.Pdf.PdfContentStream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfContents"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:WW.Pdf.PdfDictionary">
            <summary>
            A dictionary object mapping a key (string) to an <see cref="T:WW.Pdf.IPdfObject"/>.
            </summary>
            <remarks>
            Values may be any PDF object except <see cref="T:WW.Pdf.PdfStream"/>.
            </remarks>
        </member>
        <member name="T:WW.Pdf.IPdfObject">
            <summary>
            Common interface for PDF objects.
            </summary>
        </member>
        <member name="M:WW.Pdf.IPdfObject.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="M:WW.Pdf.PdfDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfDictionary"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfDictionary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfDictionary"/> class.
            </summary>
            <param name="type">The type that the dictionary represents.</param>
        </member>
        <member name="M:WW.Pdf.PdfDictionary.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.TableNames">
            <summary>
                List of all TrueType and OpenType tables
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.TableNames.ToUint(System.String)">
            <summary>
                Converts one of the predefined table names to an unsigned integer.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.ControlValueProgramTable">
            <summary>
                Class that represents the Control Value Program table ('prep').
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.ControlValueProgramTable.instructions">
            <summary>
                Set of instructions executed whenever point size or font 
                or transformation change.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.ControlValueProgramTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Creates an instance of the <see cref="T:WW.Pdf.Font.TrueType.ControlValueProgramTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.ControlValueProgramTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "prep" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.ControlValueProgramTable.Write(WW.Pdf.Font.FontFileWriter)">
            <summary>
                Writes out the array of instructions to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:WW.Pdf.PdfReal">
            <summary>
            A PDF double value.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfReal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfReal"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfReal.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfReal"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfReal.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfReal.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.OS2Table">
            <summary>
                Class that represents the OS/2 ('OS/2') table
            </summary>
            <remarks>
                <p>For detailed information on the OS/2 table, visit the following link:
                http://www.microsoft.com/typography/otspec/os2.htm</p>
                <p>For more details on the Panose classification metrics, visit the following URL:
                http://www.panose.com/hardware/pan2.asp</p>
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.OS2Table.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "os/2" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsItalic">
            <summary>
                Gets a boolean value that indicates whether this font contains 
                italic characters.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsRegular">
            <summary>
                Gets a boolean value that indicates whether characters are 
                in the standard weight/style.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsBold">
            <summary>
                Gets a boolean value that indicates whether characters possess
                a weight greater than or equal to 700.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsMonospaced">
            <summary>
                Gets a boolean value that indicates whether this font contains 
                characters that all have the same width.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsSymbolic">
            <summary>
                Gets a boolean value that indicates whether this font contains 
                special characters such as dingbats, icons, etc.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsSerif">
            <summary>
                Gets a boolean value that indicates whether characters  
                do possess serifs
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsScript">
            <summary>
                Gets a boolean value that indicates whether characters 
                are designed to simulate hand writing.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsSansSerif">
            <summary>
                Gets a boolean value that indicates whether characters  
                do not possess serifs
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsEmbeddable">
            <summary>
                Gets a boolean value that indicates whether this font may be 
                legally embedded.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.OS2Table.IsSubsettable">
            <summary>
                Gets a boolean value that indicates whether this font may be 
                subsetted.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.Entries.Glyph">
            <summary>
                Represents either a simple or composite glyph description from
                the 'glyf' table.
            </summary>
            <remarks>
                This class is nothing more than a wrapper around 
                a byte array.
            </remarks>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.Entries.Glyph.glyphIndex">
            <summary>
                The index of this glyph as obtained from the 'loca' table.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.Entries.Glyph.glyphData">
            <summary>
                Contains glyph description as raw data.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.Entries.Glyph.children">
            <summary>
                List of composite glyph indices.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.Entries.Glyph.#ctor(System.Int32)">
            <summary>
                Class constructor.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.Entries.Glyph.SetGlyphData(System.Byte[])">
            <summary>
                Sets the glyph data (duh!).
            </summary>
            <param name="glyphData"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.Entries.Glyph.AddChild(System.Int32)">
            <summary>
                Add the supplied glyph index to list of children.
            </summary>
            <param name="glyphIndex"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.Entries.Glyph.Write(WW.Pdf.Font.FontFileStream)">
            <summary>
                Writes a glyph description to the supplied stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.Glyph.Index">
            <summary>
                Gets or sets the index of this glyph.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.Glyph.Length">
            <summary>
                Gets the length of the glyph data buffer.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.Glyph.Children">
            <summary>
                Gets a ilst of child glyph indices.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.Entries.Glyph.IsComposite">
            <summary>
                Gets a value indicating whether or not this glyph represents 
                a composite glyph.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.IndexMappings">
            <summary>
                Utility class that stores a list of glyph indices and their 
                asociated subset indices.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.IndexMappings.glyphToSubset">
            <summary>
                Maps a glyph index to a subset index.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.IndexMappings.subsetToGlyph">
            <summary>
                Maps a subset index to glyph index.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.IndexMappings.#ctor">
            <summary>
                Class constructor.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.IndexMappings.HasMapping(System.Int32)">
            <summary>
                Determines whether a mapping exists for the supplied glyph index.
            </summary>
            <param name="glyphIndex"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.IndexMappings.Map(System.Int32)">
            <summary>
                Returns the subset index for <i>glyphIndex</i>.  If a subset 
                index does not exist for <i>glyphIndex</i> one is generated.
            </summary>
            <param name="glyphIndex"></param>
            <returns>A subset index.</returns>
        </member>
        <member name="M:WW.Pdf.Font.IndexMappings.Add(System.Int32[])">
            <summary>
                Adds the list of supplied glyph indices to the index mappings using 
                the next available subset index for each glyph index.
            </summary>
            <param name="glyphIndices"></param>
        </member>
        <member name="M:WW.Pdf.Font.IndexMappings.GetSubsetIndex(System.Int32)">
            <summary>
                Gets the subset index of <i>glyphIndex</i>.
            </summary>
            <param name="glyphIndex"></param>
            <returns>
                A glyph index or <b>-1</b> if a glyph to subset mapping does not exist.
            </returns>
        </member>
        <member name="M:WW.Pdf.Font.IndexMappings.GetGlyphIndex(System.Int32)">
            <summary>
                Gets the glyph index of <i>subsetIndex</i>.
            </summary>
            <param name="subsetIndex"></param>
            <returns>
                A subset index or <b>-1</b> if a subset to glyph mapping does not exist.
            </returns>
        </member>
        <member name="P:WW.Pdf.Font.IndexMappings.Count">
            <summary>
                Gets the number of glyph to subset index mappings.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IndexMappings.GlyphIndices">
            <summary>
                Gets a list of glyph indices sorted in ascending order.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.IndexMappings.SubsetIndices">
            <summary>
                Gets a list of subset indices sorted in ascending order.
            </summary>
        </member>
        <member name="T:WW.Pdf.Components.PdfOutlines">
            <summary>
            A PDF Outlines component.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfOutlines.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfOutlines"/> class.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfOutlines.OutlinesCount">
            <summary>
            Gets or sets the outlines count.
            </summary>
        </member>
        <member name="T:WW.Pdf.Components.PdfCatalog">
            <summary>
            Represents a PDF catalog.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfCatalog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfCatalog"/> class.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfCatalog.Outlines">
            <summary>
            Gets or sets the outlines.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfCatalog.Pages">
            <summary>
            Gets or sets the pages.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfCatalog.OptionalContentProperties">
            <summary>
            Gets or sets the optional content properties dictionary.
            </summary>
        </member>
        <member name="T:WW.Pdf.IPdfOutput">
            <summary>
            Interface for output of PDF data.
            </summary>
        </member>
        <member name="M:WW.Pdf.IPdfOutput.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a byte array to the output.
            </summary>
            <param name="data">Data which is written to the stream.</param>
            <param name="offset">Offset into byte array.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="P:WW.Pdf.IPdfOutput.UseFilters">
            <summary>
            Use filters for stream output?
            </summary>
            <remarks>
            Usually the answer should be <c>true</c>, 
            but it may be useful to switch off filtering
            during debugging.
            </remarks>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.TrueTypeHeader">
            <summary>
                Class that represents the Offset and Directory tables.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/otff.htm
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.TrueTypeHeader.Contains(System.String)">
            <summary>
                Gets a value indicating whether or not this font contains the 
                supplied table.
            </summary>
            <param name="tableName">A table name.</param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.TrueTypeHeader.Item(System.String)">
            <summary>
                Gets a DirectoryEntry object for the supplied table.
            </summary>
            <param name="tableName">A 4-character code identifying a table.</param>
            <returns>
                A DirectoryEntry object or null if the table cannot be located.
            </returns>
            <exception cref="T:System.ArgumentException">
                If <b>tableName</b> does not represent a table in this font.
            </exception>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.TrueTypeHeader.Count">
            <summary>
                Gets the number tables.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.PrimitiveSizes">
            <summary>
                A helper designed that provides the size of each TrueType primitives.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.GdiUnicodeRanges">
            <summary>
                Custom collection that maintains a list of Unicode ranges 
                a font supports and the glyph indices of each character.
                The list of ranges is obtained by invoking GetFontUnicodeRanges,
                however the associated glyph indices are lazily instantiated as 
                required to save memory.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Gdi.GdiUnicodeRanges.unicodeRanges">
            <summary>
                List of unicode ranges in ascending numerical order.  The order 
                is important since a binary search is used to locate and 
                uicode range from a charcater.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiUnicodeRanges.#ctor(WW.Pdf.Font.Gdi.GdiDeviceContent)">
            <summary>
                Class constuctor.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiUnicodeRanges.LoadRanges(WW.Pdf.Font.Gdi.GdiDeviceContent)">
            <summary>
                Loads all the unicode ranges.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiUnicodeRanges.GetRange(System.Char)">
            <summary>
                Locates the <see cref="T:WW.Pdf.Font.Gdi.UnicodeRange"/> for the supplied character.
            </summary>
            <param name="c"></param>
            <returns>
                The <see cref="T:WW.Pdf.Font.Gdi.UnicodeRange"/> object housing <i>c</i> or null 
                if a range does not exist for <i>c</i>.
            </returns>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiUnicodeRanges.MapCharacter(System.Char)">
            <summary>
                Translates the supplied character to a glyph index.
            </summary>
            <param name="c">Any unicode character.</param>
            <returns>
                A glyph index for <i>c</i> or 0 the supplied character does 
                not exist in the font selected into the device context.
            </returns>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiUnicodeRanges.Count">
            <summary>
                Gets the number of unicode ranges.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.GdiDeviceContent">
            <summary>
                A very lightweight wrapper around a Win32 device context
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Gdi.GdiDeviceContent.hDC">
            <summary>
                Pointer to device context created by ::CreateDC()
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiDeviceContent.#ctor">
            <summary>
                Creates a new device context that matches the desktop display surface
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiDeviceContent.Finalize">
            <summary>
                Invokes <see cref="M:WW.Pdf.Font.Gdi.GdiDeviceContent.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiDeviceContent.Dispose(System.Boolean)">
            <summary>
                Delete the device context freeing the associated memory.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiDeviceContent.SelectFont(WW.Pdf.Font.Gdi.GdiFont)">
            <summary>
                Selects a font into a device context (DC). The new object 
                replaces the previous object of the same type. 
            </summary>
            <param name="font">Handle to object.</param>
            <returns>A handle to the object being replaced.</returns>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiDeviceContent.GetCurrentObject(WW.Pdf.Font.Gdi.GdiDcObject)">
            <summary>
                Gets a handle to an object of the specified type that has been 
                selected into this device context. 
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiDeviceContent.Handle">
            <summary>
                Returns a handle to the underlying device context
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.GdiFontEnumerator">
            <summary>
                Summary description for GdiFontEnumerator.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFontEnumerator.#ctor(WW.Pdf.Font.Gdi.GdiDeviceContent)">
            <summary>
                Class constructor.
            </summary>
            <param name="dc">A non-null reference to a wrapper around a GDI device context.</param>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFontEnumerator.GetStyles(System.String)">
            <summary>
                Returns a list of font styles associated with <i>familyName</i>.
            </summary>
            <param name="familyName"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.GdiFontEnumerator.FamilyNames">
            <summary>
                Returns a list of font family names sorted in ascending order.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfPages.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfPages"/> class.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfPages.Kids">
            <summary>
            Gets the kids 
            (contains <see cref="T:WW.Pdf.PdfReference"/> instances pointing to <see cref="T:WW.Pdf.Components.PdfPage"/> instances).
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.FontSubset">
            <summary>
                Generates a subset from a TrueType font.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontSubset.#ctor(WW.Pdf.Font.FontFileReader)">
            <summary>
                Creates a new instance of the FontSubset class.
            </summary>
            <param name="reader">TrueType font parser.</param>
        </member>
        <member name="M:WW.Pdf.Font.FontSubset.Generate(System.IO.MemoryStream)">
            <summary>
                Writes the font subset to the supplied output stream.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfWArray">
            <summary>
                Represents an array class used to represent the /W entry in the CIDFont dictionary.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfWArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfWArray"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfWArray.AddEntry(System.Int32[])">
            <summary>
            Adds the entry.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfWArray.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfWArray.StartCID">
            <summary>
            Gets the start CID.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfWArray.Array">
            <summary>
            Gets the array.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfName">
            <summary>
            Represents a PDF name object.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfName"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfName"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfName.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfName.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfBody">
            <summary>
            The body of a <see cref="T:WW.Pdf.PdfDocument"/> consisting of <see cref="T:WW.Pdf.PdfIndirectObject"/> instances.
            </summary>
            <seealso cref="T:WW.Pdf.PdfDocument"/>
        </member>
        <member name="M:WW.Pdf.PdfBody.#ctor(WW.Pdf.Font.FontType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfBody"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfBody.EmbedFonts">
            <summary>
            Embeds the fonts.
            Call only once when body is finished.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfBody.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfBody.DocumentInformation">
            <summary>
            Gets or sets the document information (is null initially).
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfBody.Catalog">
            <summary>
            Gets the catalog.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfBody.Outlines">
            <summary>
            Gets the outlines.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfBody.Pages">
            <summary>
            Gets the pages.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfBody.ProcedureSetArray">
            <summary>
            Gets the procedure set array.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfBody.IndirectObjects">
            <summary>
            Gets the indirect objects.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfBody.Fonts">
            <summary>
            Gets the fonts.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfBody.FontInfo">
            <summary>
            Gets the font info.
            </summary>
            <value>The font info.</value>
        </member>
        <member name="P:WW.Pdf.PdfBody.FontSetup">
            <summary>
            Gets the font setup.
            </summary>
            <value>The font setup.</value>
        </member>
        <member name="T:WW.Pdf.Font.PdfFontCreator">
            <summary>
            Creates all necessary entries for a PDF font.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontCreator.AddFont(WW.Pdf.PdfBody,System.String,WW.Pdf.Font.Font)">
            <summary>
                Returns a subclass of the PdfFont class that may be one of
                PdfType0Font, PdfType1Font or PdfTrueTypeFont.  The type of 
                subclass returned is determined by the type of the <i>font</i>
                parameter.
            </summary>
            <param name="body">PDF body where to add the font</param>
            <param name="pdfFontID">The PDF font identifier, e.g. F15</param>
            <param name="font">Underlying font object.</param>
            <returns>Added font</returns>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontCreator.CreateCIDFont(WW.Pdf.PdfBody,System.String,WW.Pdf.Font.Font,WW.Pdf.Font.CIDFont)">
            <summary>
                Creates a character indexed font from <i>cidFont</i>
            </summary>
            <remarks>
                The <i>font</i> and <i>cidFont</i> will be different object 
                references since the <i>font</i> parameter will most likely 
                be a <see cref="T:WW.Pdf.Font.ProxyFont"/>.
            </remarks>
            <param name="body">PDF body for references</param>
            <param name="pdfFontID">The Pdf font identifier, e.g. F15</param>
            <param name="font">Required to access the font descriptor.</param>
            <param name="cidFont">The underlying CID font.</param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontCreator.CreateBase14Font(System.String,WW.Pdf.Font.Base14.Base14Font)">
            <summary>
                Creates an instance of the <see cref="T:WW.Pdf.Font.PdfType1Font"/> class
            </summary>
            <param name="pdfFontID">The Pdf font identifier, e.g. F15</param>
            <param name="base14"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontCreator.CreateTrueTypeFont(WW.Pdf.PdfBody,System.String,WW.Pdf.Font.Font,WW.Pdf.Font.TrueTypeFont)">
            <summary>
                Creates an instance of the <see cref="T:WW.Pdf.Font.PdfTrueTypeFont"/> class
                that defaults the font encoding to WinAnsiEncoding.
            </summary>
            <param name="body">PDF body for references</param>
            <param name="pdfFontID"></param>
            <param name="font"></param>
            <param name="ttf"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontCreator.GetFontMetrics(WW.Pdf.Font.Font)">
            <remarks>
                A ProxyFont must first be resolved before getting the 
                IFontMetircs implementation of the underlying font.
            </remarks>
            <param name="font"></param>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.IndexToLocationTable">
            <summary>
                Class that represents the Index To Location ('loca') table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/loca.htm
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.IndexToLocationTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Initialises a new instance of the 
                <see cref="T:WW.Pdf.Font.TrueType.IndexToLocationTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.IndexToLocationTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry,System.Int32)">
            <summary>
                Initialises a new instance of the IndexToLocationTable class.
            </summary>
            <param name="entry"></param>
            <param name="numOffsets">Expected number of offset entries.</param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.IndexToLocationTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "loca" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.IndexToLocationTable.Clear">
            <summary>
                Removes all offsets.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.IndexToLocationTable.AddOffset(System.UInt32)">
            <summary>
                Includes the supplied offset.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.IndexToLocationTable.Count">
            <summary>
                Gets the number of glyph offsets.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.IndexToLocationTable.Item(System.Int32)">
            <summary>
                Gets or sets the glyph offset at index <i>index</i>.
            </summary>
            <param name="index">A glyph index.</param>
            <returns></returns>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.HorizontalMetricsTable">
            <summary>
                Class that represents the Horizontal Metrics ('hmtx') table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/hmtx.htm
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HorizontalMetricsTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Initialises a new instance of the 
                <see cref="T:WW.Pdf.Font.TrueType.HorizontalMetricsTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HorizontalMetricsTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry,System.Int32)">
            <summary>
                Initialises a new instance of the HorizontalMetricsTable class.
            </summary>
            <param name="entry"></param>
            <param name="numMetrics">Expected number of horizontal metrics entries.</param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HorizontalMetricsTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "hmtx" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.HorizontalMetricsTable.Count">
            <summary>
                Returns the number of horizontal metrics stored in the 
                hmtx table.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.HorizontalMetricsTable.Item(System.Int32)">
            <summary>
                Gets the <see cref="T:WW.Pdf.Font.TrueType.Entries.HorizontalMetric"/> located at <i>index</i>.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.FontProgramTable">
            <summary>
                Class that represents the Font Program table ('fpgm').
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.FontProgramTable.instructions">
            <summary>
                List of N instructions. 
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.FontProgramTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Creates an instance of the <see cref="T:WW.Pdf.Font.TrueType.FontProgramTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.FontProgramTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "fpgm" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.FontProgramTable.Write(WW.Pdf.Font.FontFileWriter)">
            <summary>
                Writes out the array of instructions to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.FontProgramTable.Count">
            <summary>
                Gets the value representing the number of instructions 
                in the font program.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.Entries.HorizontalMetric">
            <summary>
                Summary description for HorizontalMetric.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.CIDFont">
            <summary>
                Base class for a CID (Character Indexed) font.
            </summary>
            <remarks>
                There are two types of CIDFont: Type 0 and Type 2.  A Type 0 CIDFont
                contains glyph description based on Adobe Type 1 font format; a 
                Type 2 CIDFont contains glyph descriptions based on the TrueType 
                font format.
                See page 338 of the Adode PDF 1.4 specification for futher details.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.CIDFont.CidBaseFont">
            <summary>
                Gets the PostScript name of the font.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.CIDFont.CMapEntries">
            <summary>
                Gets a dictionary mapping character codes to unicode values
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.CIDFont.Type">
            <summary>
                Returns <see cref="F:WW.Pdf.Font.PdfFontTypeEnum.CIDFont"/>.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.CIDFont.Registry">
            <summary>
                Gets a string identifying the issuer of the character collections.
            </summary>
            <remarks>
                The default implementation returns <see cref="F:WW.Pdf.Font.PdfCIDSystemInfo.DefaultRegistry"/>.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.CIDFont.Ordering">
            <summary>
                Gets a string that uniquely names the character collection.
            </summary>
            <remarks>
                The default implementation returns <see cref="F:WW.Pdf.Font.PdfCIDSystemInfo.DefaultOrdering"/>.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.CIDFont.Supplement">
            <summary>
                Gets the supplement number of the character collection.
            </summary>
            <remarks>
                The default implementation returns <see cref="F:WW.Pdf.Font.PdfCIDSystemInfo.DefaultSupplement"/>.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.CIDFont.DefaultWidth">
            <summary>
                Gets the default width for all glyphs.
            </summary>
            <remarks>
                The default implementation returns <see cref="F:WW.Pdf.Font.CIDFont.DefaultWidthConst"/>
            </remarks>
        </member>
        <member name="T:WW.Pdf.PdfLiteralString">
            <summary>
            A PDF literal string containing a sequence of literal characters.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfLiteralString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfLiteralString"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfLiteralString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfLiteralString"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfLiteralString.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfLiteralString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfLiteralString.IsHexadecimalString">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfFileIdentifier">
            <summary>
                A File Identifier is described in section 8.3 of the PDF specification.
                The first string is a permanent identifier based on the contents of the file 
                at the time it was originally created, and does not change as the file is 
                incrementally updated.  The second string is a changing identifier based 
                on the file's contents the last time it was updated.
            </summary>
            <remarks>
                If this class were being use to update a PDF's file identifier, we'd need 
                to add a method to parse an existing file identifier.
            </remarks>
        </member>
        <member name="M:WW.Pdf.PdfFileIdentifier.#ctor">
            <summary>
                Initialises the CreatedPart and ModifiedPart to a randomly generated GUID.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfFileIdentifier.#ctor(System.Byte[])">
            <summary>
                Initialises the CreatedPart and ModifiedPart to the passed string.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfFileIdentifier.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfFileIdentifier.CreatedPart">
            <summary>
                Returns the CreatedPart as a byte array.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfFileIdentifier.ModifiedPart">
            <summary>
                Returns the ModifiedPart as a byte array.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.HorizontalHeaderTable">
            <summary>
                Class that represents the Horizontal Header table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/hhea.htm
            </remarks>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.versionNo">
            <summary>
                Table version number 0x00010000 for version 1.0. 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.ascender">
            <summary>
                Typographic ascent. (Distance from baseline of highest ascender).
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.decender">
            <summary>
                Typographic descent. (Distance from baseline of lowest descender).
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.lineGap">
            <summary>
                Typographic line gap.  Negative LineGap values are treated as zero 
                in Windows 3.1, System 6, and System 7. 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.advanceWidthMax">
            <summary>
                Maximum advance width value in 'hmtx' table. 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.minLeftSideBearing">
            <summary>
                Minimum left sidebearing value in 'hmtx' table.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.minRightSideBearing">
            <summary>
                Minimum right sidebearing value.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.xMaxExtent">
            <summary>
                Max(lsb + (xMax - xMin)).
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.caretSlopeRise">
            <summary>
                Used to calculate the slope of the cursor (rise/run); 1 for vertical.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.caretSlopeRun">
            <summary>
                0 for vertical.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.caretOffset">
            <summary>
                The amount by which a slanted highlight on a glyph needs to be 
                shifted to produce the best appearance. Set to 0 for non-slanted fonts.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.metricDataFormat">
            <summary>
                0 for current format.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.HorizontalHeaderTable.numberOfHMetrics">
            <summary>
                Number of hMetric entries in 'hmtx' table.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HorizontalHeaderTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Class constructor.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.HorizontalHeaderTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "hhea" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.HorizontalHeaderTable.HMetricCount">
            <summary>
                Gets the number of horiztonal metrics.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.UnicodeRangeComparer">
            <summary>
            Summary description for UnicodeRangeComparer.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.PdfFontInfo">
            <summary>
            Represents a PDF font information storage class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Font.PdfFontInfo"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontInfo.AddFontProperties(System.String,System.String,System.String,System.String)">
            <summary>
            Adds font properties.
            </summary>
            <param name="name">The PDF name (e.g. "F12").</param>
            <param name="family">The font family.</param>
            <param name="style">The font style.</param>
            <param name="weight">The font weight.</param>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontInfo.AddMetrics(System.String,WW.Pdf.Font.IFontMetric)">
            <summary>
            Adds the specified font metrics.
            </summary>
            <param name="name">The PDF name (e.g. "F12").</param>
            <param name="metrics">The font metrics.</param>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontInfo.FontLookup(System.String,System.String,System.String)">
            <summary>
            Looksup a font.
            </summary>
            <param name="family">The font family.</param>
            <param name="style">The font style.</param>
            <param name="weight">The font weight.</param>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontInfo.FontLookup(WW.Pdf.Font.PdfFontInfo.FontKey)">
            <summary>
            Looksup a font.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.PdfFontInfo.NameToFontMetric">
            <summary>
            Gets the name to font metric dictionary.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.PdfFontInfo.FontKeyToName">
            <summary>
            Gets the font key to font name mapping.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.PdfFontInfo.FontKey">
            <summary>
            Represents a font key.
            </summary>
        </member>
        <member name="T:WW.Pdf.Filter.CcittFaxFilter">
            <summary>
            CCITTDaxDecode filter for PDF streams.
            Currently not supported.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.CcittFaxFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Filter.CcittFaxFilter"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.CcittFaxFilter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Filter.CcittFaxFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.CcittFaxFilter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.CcittFaxFilter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:WW.Pdf.ExtendedPdfOutput">
            <summary>
            A wrapper class for <see cref="T:WW.Pdf.IPdfOutput"/> which adds some convenience methods.
            </summary>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.#ctor(WW.Pdf.IPdfOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.ExtendedPdfOutput"/> class.
            </summary>
            <param name="pdfOut">Wrapped PDF output stream.</param>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.WW#Pdf#IPdfOutput#Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a byte array to the output.
            </summary>
            <param name="data">Data which is written to the stream.</param>
            <param name="offset">Offset into byte array.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.WriteLine">
            <summary>
            Write a line feed.
            </summary>
            <returns>This object so write calls may be concatenated.</returns>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.Write(System.Byte[])">
            <summary>
            Write a byte array.
            </summary>
            <param name="data">Data to write.</param>
            <returns>This object so write calls may be concatenated.</returns>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.WriteLine(System.Byte[])">
            <summary>
            Write a byte array followed by a line feed.
            </summary>
            <param name="data">Byte array to write.</param>
            <returns>This object so write calls may be concatenated.</returns>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.Write(System.String)">
            <summary>
            Write a string using the default encoding.
            </summary>
            <param name="data">String to write.</param>
            <returns>This object so write calls may be concatenated.</returns>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.WriteLine(System.String)">
            <summary>
            Write a string using the default encoding, followed by a line feed.
            </summary>
            <param name="data">String to write.</param>
            <returns>This object so write calls may be concatenated.</returns>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.Write(WW.Pdf.IPdfObject)">
            <summary>
            Write a PDF object.
            </summary>
            <remarks>
            Writing is done by calling the PDF object's <see cref="M:WW.Pdf.IPdfObject.Write(WW.Pdf.ExtendedPdfOutput)"/> method.
            </remarks>
            <param name="obj">PDF object to write.</param>
            <returns>This object so write calls may be concatenated.</returns>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.WriteLine(WW.Pdf.IPdfObject)">
            <summary>
            Write a PDF object, followed by a line feed.
            </summary>
            <remarks>
            Writing is done by calling the PDF object's <see cref="M:WW.Pdf.IPdfObject.Write(WW.Pdf.ExtendedPdfOutput)"/> method.
            </remarks>
            <param name="obj">PDF object to write.</param>
            <returns>This object so write calls may be concatenated.</returns>
        </member>
        <member name="F:WW.Pdf.ExtendedPdfOutput.HexDigits">
            <summary>
                Used by ToPdfHexadecimal.
            </summary>
        </member>
        <member name="M:WW.Pdf.ExtendedPdfOutput.ToPdfHexadecimal(System.Byte[])">
            <summary>
                Returns the PdfString expressed using the 'hexadecimal' convention.
            </summary>
            <remarks>
                Strings may also be written in hexadecimal form; this is useful for 
                including arbitrary binary data in a PDF file. A hexadecimal string 
                is written as a sequence of hexadecimal digits (0–9 and either A–F 
                or a–f) enclosed within angle brackets (&lt; and &gt;).
            </remarks>
        </member>
        <member name="P:WW.Pdf.ExtendedPdfOutput.WW#Pdf#IPdfOutput#UseFilters">
            <summary>
            Use filters for stream output?
            </summary>
            <remarks>
            Usually the answer should be <c>true</c>, 
            but it may be useful to switch off filtering
            for debugging.
            </remarks>
        </member>
        <member name="T:WW.Pdf.PdfStream">
            <summary>
            Represents a PDF stream.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfStream"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfStream"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfStream.AddFilter(WW.Pdf.IFilter)">
            <summary>
            Adds the filter.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfStream.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfStream.Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfStream.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.PdfType0Font">
            <summary>
                A Type 0 font is a composite font whose glyphs are obtained from a
                font like object called a CIDFont (a descendant font).
            </summary>
            <remarks>
                All versions of the PDF specification up to and including version 1.4
                only support a single descendant font.
                Compare PDF 1.3 chapter 5.6.5.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.PdfType0Font.ToUnicode">
            <summary>
                Sets the stream containing a CMap that maps character codes to 
                unicode values.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.PdfType0Font.Descendant">
            <summary>
                Sets the descendant font.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.PdfType0Font.Encoding">
            <summary>
                Sets a value representing the character encoding.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.WinAnsiMapping">
            <summary>
                Maps a Unicode character to a WinAnsi codepoint value.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Gdi.WinAnsiMapping.WinAnsiEncoding">
            <summary>
                First column is codepoint value.  Second column is unicode value.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.GdiFontCreator">
            <summary>
                Retrieves all pertinent TrueType tables by invoking GetFontData.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.FontType">
            <summary>
                Enumeration that dictates how FO.NET should treat fonts when 
                producing a PDF document.
            </summary>
            <remarks>
                <p>Each of the three alernatives has particular advantages and 
                disadvantages, which will be explained here.</p>
                <p>The <see cref="F:WW.Pdf.Font.FontType.Link"/> member specifies that all fonts 
                should be linked.  This option will produce the smallest PDF 
                document because the font program required to render individual 
                glyphs is not embedded in the PDF document.  However, this 
                option does possess two distinct disadvantages:
                <ol>
                  <li>Only characters in the WinAnsi character encoding are 
                  supported (i.e. Latin)</li>
                  <li>The PDF document will not render correctly if the linked 
                  font is not installed.</li>
                </ol>///     </p>
                <p>The <see cref="F:WW.Pdf.Font.FontType.Embed"/> option will copy the contents of 
                the entire font program into the PDF document.  This will guarantee 
                correct rendering of the document on any system, however certain 
                fonts - especially CJK fonts - are extremely large.  The MS Gothic 
                TrueType collection, for example, is 8MB.  Embedding this font file 
                would produce a ridicuously large PDF.</p>
                <p>Finally, the <see cref="F:WW.Pdf.Font.FontType.Subset"/> option will only copy the required 
                glyphs required to render a PDF document.  This option will ensure that 
                a PDF document is rendered correctly on any system, but does incur a 
                slight processing overhead to subset the font.</p>
            </remarks>
        </member>
        <member name="F:WW.Pdf.Font.FontType.Link">
            <summary>
                Fonts are linked.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontType.Embed">
            <summary>
                The entire font program is embedded.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontType.Subset">
            <summary>
                The font program is subsetted and embedded.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfArray">
            <summary>
            Represents a PDF array.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfArray.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="M:WW.Pdf.PdfArray.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Add a range of ints.
            </summary>
            <param name="range">int range</param>
        </member>
        <member name="T:WW.Pdf.Font.PdfFontFile">
            <summary>
            Font file data stream.
            </summary>
            <remarks>
            Compare PDF 1.3 chapter 5.6.
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.PdfFontFile.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Font.PdfFontFile"/> class.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Type2CIDFont">
            <summary>
                A Type 2 CIDFont is a font whose glyph descriptions are based on the 
                TrueType font format.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDFont.dc">
            <summary>
                Wrapper around a Win32 HDC.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDFont.metrics">
            <summary>
                Provides font metrics using the Win32 Api.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDFont.kerning">
            <summary>
                List of kerning pairs.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDFont.widths">
            <summary>
                Maps a glyph index to a PDF width
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDFont.baseFontName">
            <summary>
                Windows font name, e.g. 'Arial Bold'
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDFont.properties">
            <summary>
                
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDFont.usedGlyphs">
            <summary>
                Maps a glyph index to a character code.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDFont.unicodeRanges">
            <summary>
                Maps character code to glyph index.  The array is based on the 
                value of <see cref="P:WW.Pdf.Font.Type2CIDFont.FirstChar"/>.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Type2CIDFont.#ctor(WW.Pdf.Font.FontProperties)">
            <summary>
                Class constructor.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:WW.Pdf.Font.Type2CIDFont.ObtainFontMetrics">
            <summary>
                Creates a <see cref="T:WW.Pdf.Font.Gdi.GdiFontMetrics"/> object from <b>baseFontName</b>
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Type2CIDFont.Finalize">
            <summary>
                Class destructor.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Type2CIDFont.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Type2CIDFont.SubType">
            <summary>
                Returns <see cref="F:WW.Pdf.Font.PdfFontSubTypeEnum.CIDFontType2"/>.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.GlyfDataTable">
            <summary>
                Class that represents the Glyf Data table ('glyf').
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/glyf.htm
            </remarks>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.GlyfDataTable.glyphDescriptions">
            <summary>
                Maps a glyph index to a <see cref="T:WW.Pdf.Font.TrueType.Entries.Glyph"/> object.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.GlyfDataTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Creates an instance of the <see cref="T:WW.Pdf.Font.TrueType.GlyfDataTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.GlyfDataTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "glyf" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.GlyfDataTable.Write(WW.Pdf.Font.FontFileWriter)">
            <summary>
                Writes the contents of the glyf table to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.GlyfDataTable.Item(System.Int32)">
            <summary>
                Gets the <see cref="T:WW.Pdf.Font.TrueType.Entries.Glyph"/> instance located at <i>glyphIndex</i>
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.GlyfDataTable.Count">
            <summary>
                Gets the number of glyphs.
            </summary>
        </member>
        <member name="T:WW.Pdf.Components.PdfPage">
            <summary>
            Represents a PDF page.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfPage.#ctor(WW.Pdf.Components.PdfPages)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfPage"/> class.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfPage.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfPage.MediaBox">
            <summary>
            Gets the media box.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfPage.CropBox">
            <summary>
            Gets or sets the crop box. Value may be <c>null</c>,
            in this case the crop box is equal to the media box according to the PDF specification.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfPage.Contents">
            <summary>
            Gets or sets the contents reference.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfPage.Resources">
            <summary>
            Gets the resources.
            </summary>
        </member>
        <member name="T:WW.Pdf.Filter.UnsupportedFilterException">
            <summary>
            Exception thrown when an unsupported filter is requested.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.UnsupportedFilterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Filter.UnsupportedFilterException"/> class.
            </summary>
            <param name="filterName">Name of the filter.</param>
        </member>
        <member name="T:WW.Pdf.PdfWriter">
            <summary>
            Class for writing PDF files from a <see cref="T:WW.Pdf.PdfDocument"/>.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfWriter.StandardEncoding">
            <summary>
            The default encoding used for all streams.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfWriter.#ctor(WW.Pdf.PdfDocument,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfWriter"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfWriter.#ctor(WW.Pdf.PdfDocument,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfWriter"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfWriter.Write">
            <summary>
            Writes the PDF document to the stream and closes it afterwards.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfWriter.Write(System.Boolean)">
            <summary>
            Writes the PDF document to the stream.
            </summary>
            <param name="closeStream">if set to <c>true</c> closes the stream after writing.</param>
        </member>
        <member name="M:WW.Pdf.PdfWriter.EscapeSpecialChars(System.String)">
            <summary>
            Escapes the special chars in PDF strings.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfWriter.WriteCrossReferenceTable(System.Collections.Generic.List{WW.Pdf.PdfIndirectObjectWithPosition})">
            <summary>
            Writes the cross reference table and returns its position in the stream.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfBodyWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfBodyWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:WW.Pdf.PdfBodyWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a byte array to the output.
            </summary>
            <param name="data">Data which is written to the stream.</param>
            <param name="offset">Offset into byte array.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="P:WW.Pdf.PdfBodyWriter.UseFilters">
            <summary>
            Use filters for stream output?
            </summary>
            <remarks>
            Usually the answer should be <c>true</c>, 
            but it may be useful to switch off filtering
            during debugging.
            </remarks>
        </member>
        <member name="T:WW.Pdf.PdfReference">
            <summary>
            A reference that points to a <see cref="T:WW.Pdf.PdfIndirectObject"/>
            </summary>
            <seealso cref="T:WW.Pdf.PdfIndirectObject"/>
        </member>
        <member name="M:WW.Pdf.PdfReference.#ctor(WW.Pdf.IPdfIndirectObject)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfReference"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfReference"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfReference.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfReference.ReferencedObject">
            <summary>
            Gets or sets the referenced object.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.PdfUnitConverter">
            <summary>
                Converts from logical TTF units to PDF units.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.PdfUnitConverter.#ctor(System.Int32)">
            <summary>
                Class constructor.
            </summary>
            <param name="emSquare">
                Specifies the number of logical units defining the x- or 
                y-dimension of the em square of a font.
            </param>
        </member>
        <member name="M:WW.Pdf.Font.PdfUnitConverter.ToPdfUnits(System.Int32)">
            <summary>
                Convert the supplied integer from TrueType units to PDF units 
                based on the EmSquare
            </summary>
            <param name="value"></param>
            <returns>
                If the value of <i>emSquare</i> is zero, this method will 
                always return <i>value</i>.
            </returns>
        </member>
        <member name="T:WW.Pdf.Font.PdfFontTypeEnum">
            <summary>
                An enumeration listing all the fonts types available in Pdf.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.PdfFontSubTypeEnum">
            <summary>
                An enumeration listing all the font subtypes
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfContentStream">
            <summary>
            Internal stream inside the PDF, into which content could be written similar to the PDF itself.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfContentStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfContentStream"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfContentStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a byte array to the output.
            </summary>
            <param name="data">Data which is written to the stream.</param>
            <param name="offset">Offset into byte array.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="P:WW.Pdf.PdfContentStream.XOut">
            <summary>
            This allows access to this stream via an extended output wrapper
            which provides various convenience methods.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfContentStream.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfContentStream.UseFilters">
            <summary>
            Use filters for stream output?
            </summary>
            <remarks>
            Usually the answer should be <c>true</c>, 
            but it may be useful to switch off filtering
            during debugging.
            </remarks>
        </member>
        <member name="T:WW.Pdf.Font.Type2CIDSubsetFont">
            <summary>
                A subclass of Type2CIDFont that generates a subset of a 
                TrueType font.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDSubsetFont.indexMappings">
            <summary>
                Maps a glyph index to a subset index.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Type2CIDSubsetFont.namePrefix">
            <summary>
                Quasi-unique six character name prefix.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Type2CIDSubsetFont.#ctor(WW.Pdf.Font.FontProperties)">
            <summary>
                Class constructor.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:WW.Pdf.Font.Type2CIDSubsetFont.InsertNotdefGlyphs">
            <summary>
                Creates the index mappings list and adds the .notedef glyphs
            </summary>
        </member>
        <member name="T:WW.Pdf.Filter.LzwFilter">
            <summary>
            LZWDecode filter for PDF streams.
            Currently not supported.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.LzwFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Filter.LzwFilter"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.LzwFilter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Filter.LzwFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.LzwFilter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.LzwFilter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:WW.Pdf.Font.PdfCIDSystemInfo">
            <summary>
                A dictionary containing entries that define the character collection
                of the CIDFont.
            </summary>
        </member>
        <member name="F:WW.Pdf.Security.SecurityOptions.ownerPassword">
            <summary>
                Password that disables all security permissions
            </summary>
        </member>
        <member name="F:WW.Pdf.Security.SecurityOptions.userPassword">
            <summary>
                The user password 
            </summary>
        </member>
        <member name="F:WW.Pdf.Security.SecurityOptions.permissions">
            <summary>
                Collection of flags describing permissions granted to user who opens 
                a file with the user password.
            </summary>
            <remarks>
                The given initial value zero's out first two bits.
                The PDF specification dictates that these entries must be 0.
            </remarks>
        </member>
        <member name="M:WW.Pdf.Security.SecurityOptions.EnablePrinting(System.Boolean)">
            <summary>
                Enables or disables printing.
            </summary>
            <param name="enable">If true enables printing otherwise false</param>
        </member>
        <member name="M:WW.Pdf.Security.SecurityOptions.EnableChanging(System.Boolean)">
            <summary>
                Enable or disable changing the document other than by adding or 
                changing text notes and AcroForm fields.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:WW.Pdf.Security.SecurityOptions.EnableCopying(System.Boolean)">
            <summary>
                Enable or disable copying of text and graphics from the document.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:WW.Pdf.Security.SecurityOptions.EnableAdding(System.Boolean)">
            <summary>
                Enable or disable adding and changing text notes and AcroForm fields.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:WW.Pdf.Security.SecurityOptions.OwnerPassword">
            <summary>
                Returns the owner password as a string.
            </summary>
            <value>
                The default value is null
            </value>
        </member>
        <member name="P:WW.Pdf.Security.SecurityOptions.UserPassword">
            <summary>
                Returns the user password as a string.
            </summary>
            <value>
                The default value is null
            </value>
        </member>
        <member name="P:WW.Pdf.Security.SecurityOptions.Permissions">
            <summary>
                The document access privileges encoded in a 32-bit unsigned integer
            </summary>
            <value>
                The default access priviliges are:
                <ul>
                <li>Printing disallowed</li>
                <li>Modifications disallowed</li>
                <li>Copy and Paste disallowed</li>
                <li>Addition or modification of annotation/form fields disallowed</li>
                </ul>
                To override any of these priviliges see the <see cref="M:WW.Pdf.Security.SecurityOptions.EnablePrinting(System.Boolean)"/>,
                <see cref="M:WW.Pdf.Security.SecurityOptions.EnableChanging(System.Boolean)"/>, <see cref="M:WW.Pdf.Security.SecurityOptions.EnableCopying(System.Boolean)"/>, 
                <see cref="M:WW.Pdf.Security.SecurityOptions.EnableAdding(System.Boolean)"/> methods
            </value>
        </member>
        <member name="T:WW.Pdf.Security.SecurityManager">
            <summary>
            Implements Adobe's standard security handler.  A security handler is 
            a software module that implements various aspects of the encryption 
            process.
            </summary>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.#ctor(WW.Pdf.Security.SecurityOptions,WW.Pdf.PdfFileIdentifier)">
            <summary>
                Constructs a new standard security manager.
            </summary>
            <param name="options">I
                The user supplied PDF options that provides access to the passwords and 
                the access permissions.
            </param>
            <param name="fileId">
                The PDF document's file identifier (see section 8.3 of PDF specification).
            </param>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.CreateMasterKey(WW.Pdf.Security.SecurityOptions,WW.Pdf.PdfFileIdentifier)">
            <summary>
                Computes the master key that is used to encrypt string and stream data 
                in the PDF document.
            </summary>
            <param name="options">
                The user supplied PDF options that provides access to the passwords and
                the access permissions.
            </param>
            <param name="fileId">
                The PDF document's file identifier (see section 8.3 of PDF specification).
            </param>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.CreateOwnerEntry(WW.Pdf.Security.SecurityOptions)">
            <summary>
                Computes the O(owner) value in the encryption dictionary.
            </summary>
            <remarks>
                Corresponds to algorithm 3.3 on page 69 of the PDF specficiation.
            </remarks>
            <param name="options">
                The user supplied PDF options that provides access to the passwords.
            </param>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.CreateUserEntry(WW.Pdf.Security.SecurityOptions)">
            <summary>
                Computes the U(user) value in the encryption dictionary.
            </summary>
            <remarks>
                Corresponds to algorithm 3.4 on page 70 of the PDF specficiation.
            </remarks>
            <param name="options">
                The user supplied PDF options that provides access to the passwords.
            </param>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.ComputeEncryptionKey32(System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Computes an encryption key that is used to encrypt string and stream data 
                in the PDF document.
            </summary>
            <remarks>
                Corresponds to algorithm 3.2 in section 3.5 of the PDF specficiation.
            </remarks>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.PadPassword(System.String)">
            <summary>
                Pads or truncates a password string to exactly 32-bytes.
            </summary>
            <remarks>
                Corresponds to step 1 of algorithm 3.2 on page 69 of the PDF 1.3 specficiation.
            </remarks>
            <param name="password">The password to pad or truncate.</param>
            <returns>
                A byte array of length 32 bytes containing the padded or truncated password.
            </returns>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.CheckUserPassword(System.String,System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Determines if the passed password matches the user password
                used to initialise this security manager.
            </summary>
            <remarks>
                Used for testing purposes only.  Corresponds to algorithm 3.5 in the
                PDF 1.3 specification.
            </remarks>
            <returns>True if the password is correct.</returns>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.CheckUserPassword(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Performs the actual checking of the user password.
            </summary>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.CheckOwnerPassword(System.String,System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Checks the owner password.
            </summary>
        </member>
        <member name="M:WW.Pdf.Security.SecurityManager.CompareArray(System.Byte[],System.Byte[])">
            <summary>
                Compares two byte arrays and returns true if they are equal.
            </summary>
        </member>
        <member name="P:WW.Pdf.Security.SecurityManager.UserEntry">
            <summary>
                Access to the raw user entry byte array.
            </summary>
            <remarks>
                Required for testing purposes;
            </remarks>
        </member>
        <member name="P:WW.Pdf.Security.SecurityManager.OwnerEntry">
            <summary>
                Access to the raw owner entry byte array.
            </summary>
            <remarks>
                Required for testing purposes;
            </remarks>
        </member>
        <member name="T:WW.Pdf.Filter.RunLengthFilter">
            <summary>
            RunLengthDecode filter for PDF streams.
            Currently not supported.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.RunLengthFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Filter.RunLengthFilter"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.RunLengthFilter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Filter.RunLengthFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.RunLengthFilter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.RunLengthFilter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:WW.Pdf.PdfBodyCollection">
            <summary>
            A collection of <see cref="T:WW.Pdf.PdfBody"/> instances.
            </summary>
        </member>
        <member name="T:WW.Pdf.Filter.Ascii85Filter">
            <summary>
            ASCII85Decode filter for PDF streams.
            Currently not supported.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.Ascii85Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Filter.Ascii85Filter"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.Ascii85Filter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Filter.Ascii85Filter.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.Ascii85Filter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.Ascii85Filter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:WW.Pdf.Components.PdfOptionalContentPropertiesDictionary">
            <summary>
            Represents a optional content properties dictionary.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfOptionalContentPropertiesDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfOptionalContentPropertiesDictionary"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfOptionalContentPropertiesDictionary.Register(WW.Pdf.Components.PdfOptionalContentGroup,System.Boolean)">
            <summary>
            Register the optional content group.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfOptionalContentPropertiesDictionary.Ocgs">
            <summary>
            Gets the array of registered content groups.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfOptionalContentPropertiesDictionary.Dictionary">
            <summary>
            The default viewing optional content configuration dictionary.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfSoftMaskImage">
            <summary>
            Represents a soft mask image, defining opacity values for a <see cref="T:WW.Pdf.PdfImage"/>, 
            allowing for image transparency.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfSoftMaskImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfSoftMaskImage"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfSoftMaskImage.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="T:WW.Pdf.PdfNull">
            <summary>
            Represents the PDF null object.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfNull.Null">
            <summary>
            The reusable null value.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfNull.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="T:WW.Pdf.PdfIndirectObjectCollection">
            <summary>
            Represents a collection of <see cref="T:WW.Pdf.IPdfIndirectObject"/> elements.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfImage">
            <summary>
            Class representing an PDF image object.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfImage.name">
            <summary>
            Reference name.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfImage.bitmap">
            <summary>
            Referenced bitmap.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfImage.clipMask">
            <summary>
            Clipmask.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfImage.#ctor(System.String,WW.Drawing.IBitmap,System.Boolean,WW.Pdf.PdfImage.ClipRect)">
            <summary>
            Constructor.
            </summary>
            <param name="baseName">basic name</param>
            <param name="bitmap">bitmap for image</param>
            <param name="ownsBitmap">
            if set to <c>true</c> this object will own the specified bitmap, 
            meaning that it will dispose of the bitmap when this object is disposed.
            </param>
            <param name="clipMask">rectangular clipping mask</param>
        </member>
        <member name="M:WW.Pdf.PdfImage.#ctor(System.String,WW.Drawing.IBitmap,System.Boolean)">
            <summary>
            Constructor for usage of the complete image.
            </summary>
            <param name="baseName">basic name</param>
            <param name="bitmap">bitmap for image</param>
            <param name="ownsBitmap">
            if set to <c>true</c> this object will own the specified bitmap, 
            meaning that it will dispose of the bitmap when this object is disposed.
            </param>
        </member>
        <member name="M:WW.Pdf.PdfImage.AddSoftMask(WW.Pdf.PdfBody)">
            <summary>
            Adds a soft mask if the bitmap has transparent pixels.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfImage.GetAlpha(System.Int32,System.Int32)">
            <summary>
            Get the pixel alpha at a certain location.
            </summary>
            <param name="x">x value, between 0 and Width - 1</param>
            <param name="y">y value, between 0 and Height - 1</param>
            <returns>alpha value</returns>
        </member>
        <member name="M:WW.Pdf.PdfImage.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the pixel at a certain location.
            </summary>
            <param name="x">x value, between 0 and Width - 1</param>
            <param name="y">y value, between 0 and Height - 1</param>
            <returns>rgb value</returns>
        </member>
        <member name="M:WW.Pdf.PdfImage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfImage.GetPdfName(System.String,WW.Pdf.PdfImage.ClipRect)">
            <summary>
            Get a name for an image reference suitable for a PDF name.
            </summary>
            <param name="baseName">basic name (it is assumed that this name is already PDF-clean)</param>
            <param name="clipMask">clip mask</param>
            <returns>name suitable to be used in PDF</returns>
        </member>
        <member name="M:WW.Pdf.PdfImage.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfImage.Name">
            <summary>
            Get the PDF internal name.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfImage.Width">
            <summary>
            Get the width of the image.
            </summary>
        </member>
        <member name="P:WW.Pdf.PdfImage.Height">
            <summary>
            Get the height of the image.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfImage.ClipRect">
            <summary>
            Data for the clipping rectangle.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfImage.ClipRect.X">
            <summary>
            X of corner.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfImage.ClipRect.Y">
            <summary>
            Y of corner.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfImage.ClipRect.Width">
            <summary>
            Rectangle width.
            </summary>
        </member>
        <member name="F:WW.Pdf.PdfImage.ClipRect.Height">
            <summary>
            Rectangle height.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfImage.ClipRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfImage.ClipRect"/> struct.
            </summary>
            <param name="x">Corner x.</param>
            <param name="y">Corner y.</param>
            <param name="width">Rectangle width.</param>
            <param name="height">Rectangle height.</param>
        </member>
        <member name="M:WW.Pdf.PdfImage.ClipRect.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfImage.ClipRect"/> struct.
            </summary>
            <param name="width">Rectangle width.</param>
            <param name="height">Rectangle height.</param>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.PostTable">
            <summary>
                Class that represents the PostScript ('post') table
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/post.htm
            </remarks>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.version">
            <summary>
                0x00010000 for version 1.0 
                0x00020000 for version 2.0 
                0x00025000 for version 2.5 (deprecated) 
                0x00030000 for version 3.0 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.italicAngle">
            <summary>
                Italic angle in counter-clockwise degrees from the vertical. 
                Zero for upright text, negative for text that leans to the 
                right (forward). 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.underlinePosition">
            <summary>
                This is the suggested distance of the top of the underline from 
                the baseline (negative values indicate below baseline). 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.underlineThickness">
            <summary>
                Suggested values for the underline thickness. 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.fixedPitch">
            <summary>
                Set to 0 if the font is proportionally spaced, non-zero if the 
                font is not proportionally spaced (i.e. monospaced). 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.minMemType42">
            <summary>
                Minimum memory usage when an OpenType font is downloaded. 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.maxMemType42">
            <summary>
                Maximum memory usage when an OpenType font is downloaded. 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.minMemType1">
            <summary>
                Minimum memory usage when an OpenType font is downloaded 
                as a Type 1 font. 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.PostTable.maxMemType1">
            <summary>
                Maximum memory usage when an OpenType font is downloaded 
                as a Type 1 font. 
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.PostTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Class constructor.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.PostTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "post" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.PostTable.IsFixedPitch">
            <summary>
                Gets a boolean value that indicates whether this font is 
                proportionally spaced (fixed pitch) or not.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.Entries.GlyphReader.ReadGlyph(System.Int32)">
            <summary>
                Reads a glyph description from the specified offset.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.Entries.GlyphReader.ReadCompositeGlyph(WW.Pdf.Font.FontFileStream,WW.Pdf.Font.TrueType.Entries.Glyph)">
            <summary>
                Populate the <i>composites</i>IList containing all child glyphs 
                that this glyph uses.
            </summary>
            <remarks>
                The <i>stream</i> parameter must be positioned 10 bytes from 
                the beginning of the glyph description, i.e. the flags field.
            </remarks>
            <param name="stream"></param>
            <param name="glyph">The glyph to read.</param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.Entries.GlyphReader.GetGlyphLength(System.Int32)">
            <summary>
                Gets the length of the glyph description in bytes at 
                index <i>index</i>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.Entries.BitMasks">
            <summary>
                Bit masks of the flags field in a composite glyph.
            </summary>
        </member>
        <member name="T:WW.Pdf.Filter.FlateFilter">
            <summary>
            FlateDecode filter for PDF streams.
            </summary>
        </member>
        <member name="M:WW.Pdf.Filter.FlateFilter.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
            <param name="data">incoming data</param>
            <returns>encoded data</returns>
        </member>
        <member name="P:WW.Pdf.Filter.FlateFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.FlateFilter.DecodeParameters">
            <summary>
            Gets the decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:WW.Pdf.Filter.FlateFilter.HasDecodeParameters">
            <summary>
            Gets a value indicating whether this instance has decode parameters.
            </summary>
            <value></value>
        </member>
        <member name="M:WW.Pdf.Components.PdfProcedureSetArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:PdfProcedureSet"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfProcedureSetArray.AddProcedure(WW.Pdf.PdfName)">
            <summary>
            Add a procedure.
            </summary>
            <param name="proc"></param>
        </member>
        <member name="T:WW.Pdf.Components.PdfOptionalContentConfigurationDictionary">
            <summary>
            Represents an optional content configuration dictionary.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfOptionalContentConfigurationDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfOptionalContentConfigurationDictionary"/> class.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfOptionalContentConfigurationDictionary.On">
            <summary>
            (Optional) An array of optional content groups whose state should be set to
            ON when this configuration is applied.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfOptionalContentConfigurationDictionary.Off">
            <summary>
            (Optional) An array of optional content groups whose state should be set to
            OFF when this configuration is applied.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfOptionalContentConfigurationDictionary.Order">
            <summary>
            (Optional) An array specifying the recommended order for presentation of
            optional content groups in a user interface.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfTextString">
            <summary>
            A PDF text string containing a sequence of literal characters.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfTextString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfTextString"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfTextString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfTextString"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfTextString.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfTextString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfBool">
            <summary>
            Represents a PODF bool.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfBool.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfBool.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.MaximumProfileTable">
            <summary>
                Class that represents the Horizontal Metrics ('maxp') table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/maxp.htm
            </remarks>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.versionNo">
            <summary>
                Table version number
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.numGlyphs">
            <summary>
                The number of glyphs in the font.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxPoints">
            <summary>
                Maximum points in a non-composite glyph. 
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxContours">
            <summary>
                Maximum contours in a non-composite glyph.  Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxCompositePoints">
            <summary>
                Maximum points in a composite glyph.  Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxCompositeContours">
            <summary>
                Maximum contours in a composite glyph.  Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxZones">
            <summary>
                1 if instructions do not use the twilight zone (Z0), or 
                2 if instructions do use Z0; should be set to 2 in most 
                cases.  Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxTwilightPoints">
            <summary>
                Maximum points used in Z0.   Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxStorage">
            <summary>
                Number of Storage Area locations.  Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxFunctionDefs">
            <summary>
                Number of FDEFs.   Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxInstructionDefs">
            <summary>
                Number of IDEFs.   Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxStackElements">
            <summary>
                Maximum stack depth2.  Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxSizeOfInstructions">
            <summary>
                Maximum byte count for glyph instructions.  Only set 
                if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxComponentElements">
            <summary>
                Maximum number of components referenced at "top level" 
                for any composite glyph.   Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.MaximumProfileTable.maxComponentDepth">
            <summary>
                Maximum levels of recursion; 1 for simple components. 
                Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.MaximumProfileTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Initialises a new instance of the <see cref="T:WW.Pdf.Font.TrueType.MaximumProfileTable"/>
                class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.MaximumProfileTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "maxp" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.MaximumProfileTable.GlyphCount">
            <summary>
                Gets the number of glyphs
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.FontProperties">
            <summary>
                Collection of font properties such as face name and whether the 
                a font is bold and/or italic.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontProperties.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
                Class constructor.
            </summary>
            <remarks>
                Regular    : bold=false, italic=false
                Bold       : bold=true,  italic=false
                Italic     : bold=false, italic=true
                BoldItalic : bold=true,  italic=true
            </remarks>
            <param name="faceName">Font face name, e.g. Arial.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
        </member>
        <member name="P:WW.Pdf.Font.FontProperties.FaceName">
            <summary>
            Gets the face name (may include spaces).
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.FontProperties.PdfBaseName">
            <summary>
            Gets the PDF font base name (doesn't include spaces).
            </summary>
            <remarks>
            See paragraph "5.5.2 TrueType Fonts" in the "PDF Reference" version 1.3.
            </remarks>
        </member>
        <member name="P:WW.Pdf.Font.FontProperties.IsRegular">
            <summary>
            Gets a value indicating whether this instance is regular.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.FontProperties.IsBold">
            <summary>
            Gets a value indicating whether this instance is bold.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.FontProperties.IsItalic">
            <summary>
            Gets a value indicating whether this instance is italic.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.FontProperties.IsBoldItalic">
            <summary>
            Gets a value indicating whether this instance is bold italic.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.FontFileStream">
            <summary>
                Class designed to read and write primitive datatypes from/to a 
                TrueType font file.
            </summary>
            <remarks>
                <p>All OpenType fonts use Motorola-style byte ordering (Big Endian).</p>
                <p>The following table lists the primitives and their definition. 
                Note the difference between the .NET CLR definition of certain 
                types and the TrueType definition.</p>
                <p>
                BYTE         8-bit unsigned integer. 
                CHAR         8-bit signed integer. 
                USHORT       16-bit unsigned integer. 
                SHORT        16-bit signed integer. 
                ULONG        32-bit unsigned integer. 
                LONG         32-bit signed integer. 
                Fixed        32-bit signed fixed-point number (16.16) 
                FWORD        16-bit signed integer (SHORT) that describes a 
                             quantity in FUnits. 
                UFWORD       16-bit unsigned integer (USHORT) that describes a 
                             quantity in FUnits. 
                F2DOT14      16-bit signed fixed number with the low 14 bits of 
                             fraction (2.14). 
                LONGDATETIME Date represented in number of seconds since 12:00 
                             midnight, January 1, 1904. The value is represented 
                             as a signed 64-bit integer. 
                Tag          Array of four uint8s (length = 32 bits) used to identify 
                             a script, language system, feature, or baseline 
                GlyphID      Glyph index number, same as uint16(length = 16 bits) 
                Offset       Offset to a table, same as uint16 (length = 16 bits), 
                             NULL offset = 0x0000 
                </p>
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.#ctor(System.Byte[])">
            <summary>
                Initialises a new instance of the <see cref="T:WW.Pdf.Font.FontFileStream"/> 
                class using the supplied byte array as the underlying buffer.
            </summary>
            <param name="data">The font data encoded in a byte array.</param>
            <exception cref="T:System.ArgumentNullException">
                <i>data</i> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
                <i>data</i> is a zero-length array.
            </exception>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.#ctor(System.IO.Stream)">
            <summary>
                Initialises a new instance of the <see cref="T:WW.Pdf.Font.FontFileStream"/>
                class using the supplied stream as the underlying buffer.
            </summary>
            <param name="stream">Reference to an existing stream.</param>
            <exception cref="T:System.ArgumentNullException">
                <i>stream</i> is a null reference.
            </exception>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadByte">
            <summary>
                Reads an unsigned byte from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteByte(System.Byte)">
            <summary>
                Writes an unsigned byte from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadChar">
            <summary>
                Reads an signed byte from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteChar(System.SByte)">
            <summary>
                Writes a signed byte from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadShort">
            <summary>
                Reads a short (16-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteShort(System.Int32)">
            <summary>
                Writes a short (16-bit signed integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadFWord">
            <summary>
                Reads a short (16-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteFWord(System.Int32)">
            <summary>
                Writes a short (16-bit signed integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadUShort">
            <summary>
                Reads a ushort (16-bit unsigned integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteUShort(System.Int32)">
            <summary>
                Writes a ushort (16-bit unsigned integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadUFWord">
            <summary>
                Reads a ushort (16-bit unsigned integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteUFWord(System.Int32)">
            <summary>
                Writes a ushort (16-bit unsigned integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadLong">
            <summary>
                Reads an int (32-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteLong(System.Int32)">
            <summary>
                Writes an int (32-bit signed integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadULong">
            <summary>
                Reads a uint (32-bit unsigned integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteULong(System.UInt32)">
            <summary>
                Writes a uint (32-bit unsigned integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadFixed">
            <summary>
                Reads an int (32-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteFixed(System.Int32)">
            <summary>
                Writes an int (32-bit unsigned integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadLongDateTime">
            <summary>
                Reads a long (64-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteDateTime(System.Int64)">
            <summary>
                Writes a long (64-bit signed integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.ReadTag">
            <summary>
                Reads a tag (array of four bytes) from the font stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.WriteTag(System.Byte[])">
            <summary>
                Writes a tab (array of four bytes) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.Pad">
            <summary>
                Ensures the stream is padded on a 4-byte boundary.
            </summary>
            <remarks>
                This method will output between 0 and 3 bytes to the stream.
            </remarks>
            <returns>
                A value between 0 and 3 (inclusive).
            </returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes a sequence of bytes to the underlying stream.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a block of bytes from the current stream and writes 
                the data to buffer.
            </summary>
            <param name="buffer">A byte buffer big enough to store <i>count</i> bytes.</param>
            <param name="offset">The byte offset in buffer to begin reading.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.Skip(System.Int64)">
            <summary>
                Offsets the stream position by the supplied number of bytes.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.SetRestorePoint">
            <summary>
                Saves the current stream position onto a marker stack.
            </summary>
            <returns>
                Returns the current stream position.
            </returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileStream.Restore">
            <summary>
                Sets the stream <see cref="P:WW.Pdf.Font.FontFileStream.Position"/> using the marker at the 
                head of the marker stack.
            </summary>
            <returns>
                Returns the stream position before it was reset.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                If the markers stack is empty.
            </exception>
        </member>
        <member name="P:WW.Pdf.Font.FontFileStream.Position">
            <summary>
                Gets or sets the current position of the font stream.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.FontFileStream.Length">
            <summary>
                Gets the length of the font stream in bytes.
            </summary>
        </member>
        <member name="T:WW.Pdf.Components.PdfPropertiesDictionary">
            <summary>
            Represents a properties dictionary.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfPropertiesDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfPropertiesDictionary"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfPropertiesDictionary.AddProperty(System.String,WW.Pdf.PdfReference)">
            <summary>
            Add new property pair to dictionary.
            </summary>
        </member>
        <member name="T:WW.Pdf.Components.PdfOptionalContentGroup">
            <summary>
            Represents a optional content group dictionary.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfOptionalContentGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfOptionalContentGroup"/> class.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfOptionalContentGroup.Name">
            <summary>
            Gets or sets the name of optional content group.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfInt">
            <summary>
            A PDF integer.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfInt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfInt"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfInt.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfInt"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WW.Pdf.PdfInt.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfInt.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfInt.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:WW.Pdf.PdfCMap">
            <summary>
                Class that defines a mapping between character codes (CIDs) 
                to a character selector (Identity-H encoding)
            </summary>
            <remarks>
            Compare PDF 1.3 chapters 5.9 and 5.6.4.
            </remarks>
        </member>
        <member name="M:WW.Pdf.PdfCMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.PdfCMap"/> class.
            </summary>
        </member>
        <member name="M:WW.Pdf.PdfCMap.AddBfRanges(System.Collections.Generic.IDictionary{System.UInt16,System.Char})">
            <summary>
                Adds the supplied glyph -> unicode pairs.
            </summary>
            <remarks>
                Both the key and value must be a ushort.
            </remarks>
            <param name="map"></param>
        </member>
        <member name="M:WW.Pdf.PdfCMap.AddBfRange(System.UInt16,System.UInt16)">
            <summary>
                Adds the supplied glyph index to unicode value mapping.
            </summary>
            <param name="glyphIndex"></param>
            <param name="unicodeValue"></param>
        </member>
        <member name="M:WW.Pdf.PdfCMap.Write(WW.Pdf.ExtendedPdfOutput)">
            <summary>
            Write the object to an output stream.
            </summary>
            <param name="output">Output stream, usually a PDF document or an internal PDF content stream.</param>
        </member>
        <member name="P:WW.Pdf.PdfCMap.Ranges">
            <summary>
            Gets the ranges.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueTypeFont">
            <summary>
                Represents a TrueType font program.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueTypeFont.dc">
            <summary>
                Wrapper around a Win32 HDC.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueTypeFont.metrics">
            <summary>
                Provides font metrics using the Win32 Api.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueTypeFont.kerning">
            <summary>
                List of kerning pairs.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueTypeFont.widths">
            <summary>
                Maps a glyph index to a PDF width
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueTypeFont.properties">
            <summary>
                
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueTypeFont.#ctor(WW.Pdf.Font.FontProperties)">
            <summary>
                Class constructor
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueTypeFont.ObtainFontMetrics">
            <summary>
                Creates a <see cref="T:WW.Pdf.Font.Gdi.GdiFontMetrics"/> object from <b>baseFontName</b>
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueTypeFont.GetWidth(System.UInt16)">
            <summary>
                See <see cref="M:WW.Pdf.Font.Font.GetWidth(System.UInt16)"/>
            </summary>
            <param name="charIndex">A WinAnsi codepoint.</param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.TrueTypeFont.SubType">
            <summary>
                Returns <see cref="F:WW.Pdf.Font.PdfFontSubTypeEnum.TrueType"/>.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.KerningTable">
            <summary>
                Class that represents the Kerning table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/kern.htm
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.KerningTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Class constructor.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.KerningTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "kern" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.KerningTable.Write(WW.Pdf.Font.FontFileWriter)">
            <summary>
                No supported.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.KerningTable.HasKerningInfo">
            <summary>
                Gets a boolean value that indicates this font contains format 0
                kerning information.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.KerningTable.KerningPairs">
            <summary>
                Returns a collection of kerning pairs.
            </summary>
            <remarks>
                If <i>HasKerningInfo</i> returns <b>false</b>, this method will 
                always return null.
            </remarks>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.FontTableFactory">
            <summary>
                Instantiates a font table from a table tag.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.FontTableFactory.Make(System.String,WW.Pdf.Font.FontFileReader)">
            <summary>
                Creates an instance of a class that implements the FontTable interface.
            </summary>
            <param name="tableName">
                One of the pre-defined TrueType tables from the <see cref="T:WW.Pdf.Font.TrueType.TableNames"/> class.
            </param>
            <returns>
                A subclass of <see cref="T:WW.Pdf.Font.TrueType.FontTable"/> that is capable of parsing 
                a TrueType table.
            </returns>
            <exception cref="T:System.ArgumentException">
                If a class capable of parsing <i>tableName</i> is not available.
            </exception>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.UnicodeRange">
            <summary>
                Class that represents a unicode character range as returned 
                by the GetFontUnicodeRanges function.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.Gdi.UnicodeRange.indices">
            <summary>
                Array of glyph indices for each character represented by 
                this range begining at <see cref="P:WW.Pdf.Font.Gdi.UnicodeRange.Start"/>.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.UnicodeRange.#ctor(WW.Pdf.Font.Gdi.GdiDeviceContent,System.UInt16,System.UInt16)">
            <summary>
            Class constructor.
            </summary>
            <param name="dc">The device content.</param>
            <param name="start">Value representing start of unicode range.</param>
            <param name="end">Value representing end of unicode range.</param>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.UnicodeRange.MapCharacter(System.Char)">
            <summary>
                Returns the glyph index of <i>c</i>.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.UnicodeRange.Start">
            <summary>
                Gets a value representing the start of the unicode range.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.Gdi.UnicodeRange.End">
            <summary>
                Gets a value representing the end of the unicode range.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.FontSetup">
            <summary>
                Sets up the PDF fonts.
            </summary>
            <remarks>
                Assigns the font (with metrics) to internal names like "F1" and
                assigns family-style-weight triplets to the fonts.
            </remarks>
        </member>
        <member name="F:WW.Pdf.Font.FontSetup.startIndex">
            <summary>
                First 16 indices are used by base 14 and generic fonts
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontSetup.fontInfo">
            <summary>
                Handles mapping font triplets to a IFontMetric implementor
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontSetup.#ctor(WW.Pdf.Font.PdfFontInfo,WW.Pdf.Font.FontType)">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Font.FontSetup"/> class.
            </summary>
            <param name="fontInfo">The font info.</param>
            <param name="proxyFontType">Type of the proxy font.</param>
        </member>
        <member name="M:WW.Pdf.Font.FontSetup.AddSystemFonts(WW.Pdf.Font.FontType)">
            <summary>
                Adds all the system fonts to the FontInfo object.
            </summary>
            <remarks>
                Adds metrics for basic fonts and useful family-style-weight
                triplets for lookup.
            </remarks>
            <param name="fontType">Determines what type of font to instantiate.</param>
        </member>
        <member name="M:WW.Pdf.Font.FontSetup.IsBase14FontName(System.String)">
            <summary>
                Returns <b>true</b> is <i>familyName</i> represents one of the 
                base 14 fonts; otherwise <b>false</b>.
            </summary>
            <param name="familyName"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontSetup.GetNextAvailableName">
            <summary>
                Gets the next available font name.  A font name is defined as an 
                integer prefixed by the letter 'F'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontSetup.AddToResources(WW.Pdf.PdfBody)">
            <summary>
                Add the fonts in the font info to the PDF document.
            </summary>
            <param name="body">PDF body object to add fonts too.</param>
        </member>
        <member name="M:WW.Pdf.Font.PdfTrueTypeFont.#ctor(System.String,System.String)">
            <param name="fontName">
                The name by which the font is reference in the Font subdictionary 
            </param>
            <param name="baseFont">
                The PostScript name of the font.
            </param>
        </member>
        <member name="P:WW.Pdf.Font.PdfTrueTypeFont.Descriptor">
            <summary>
                Sets the font descriptor.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.PdfTrueTypeFont.FirstChar">
            <summary>
                Sets the first character code defined in the font's widths array
            </summary>
            <value>
                The default value is 0.
            </value>
        </member>
        <member name="P:WW.Pdf.Font.PdfTrueTypeFont.LastChar">
            <summary>
                Sets the last character code defined in the font's widths array
            </summary>
            <value>
                The default value is 255.
            </value>
        </member>
        <member name="P:WW.Pdf.Font.PdfTrueTypeFont.Widths">
            <summary>
                Sets the array of character widths.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.PdfFontDescriptor">
            <summary>
            Description of a font.
            </summary>
            <remarks>
            Compare PDF 1.3 chapter 5.7.
            </remarks>
        </member>
        <member name="T:WW.Pdf.Font.PdfFontCollection">
            <summary>
            Collection of <see cref="T:WW.Pdf.Font.PdfFont"/> instances.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.KerningPairs.pairs">
            <summary>
                Key - Kerning pair identifier
                Value - Kerning amount
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.KerningPairs.#ctor">
            <summary>
                Creates an instance of KerningPairs allocating space for 
                100 kerning pairs.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.KerningPairs.#ctor(System.Int32)">
            <summary>
                Creates an instance of KerningPairs allocating space for 
                <i>numPairs</i> kerning pairs.
            </summary>
            <param name="numPairs"></param>
        </member>
        <member name="M:WW.Pdf.Font.KerningPairs.HasKerning(System.UInt16,System.UInt16)">
            <summary>
                Returns true if a kerning value exists for the supplied 
                glyph index pair.
            </summary>
            <param name="left">Glyph index for left-hand glyph.</param>
            <param name="right">Glyph index for right-hand glyph.</param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.KerningPairs.Add(System.UInt16,System.UInt16,System.Int32)">
            <summary>
                Creates a new kerning pair.
            </summary>
            <remarks>
                This method will ignore duplicates.
            </remarks>
            <param name="left">The glyph index for the left-hand glyph in the kerning pair.</param>
            <param name="right">The glyph index for the right-hand glyph in the kerning pair. </param>
            <param name="value">The kerning value for the supplied pair.</param>
        </member>
        <member name="M:WW.Pdf.Font.KerningPairs.GetIndex(System.UInt16,System.UInt16)">
            <summary>
                Returns a kerning pair identifier.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.KerningPairs.Item(System.UInt16,System.UInt16)">
            <summary>
                Gets the kerning amount for the supplied glyph index pair.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.KerningPairs.Length">
            <summary>
                Gets the number of kernings pairs.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.TrueType.ControlValueTable">
            <summary>
                Class that represents the Control Value table ('cvt').
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.TrueType.ControlValueTable.values">
            <summary>
                List of N values referenceable by instructions. 
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.ControlValueTable.#ctor(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Creates an instance of the <see cref="T:WW.Pdf.Font.TrueType.ControlValueTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.ControlValueTable.Read(WW.Pdf.Font.FontFileReader)">
            <summary>
                Reads the contents of the "cvt" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:WW.Pdf.Font.TrueType.ControlValueTable.Write(WW.Pdf.Font.FontFileWriter)">
            <summary>
                Writes out the array of values to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:WW.Pdf.Font.TrueType.ControlValueTable.Count">
            <summary>
                Gets the value representing the number of values that can 
                be referenced by instructions.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.Gdi.GdiFont">
            <summary>
                A thin wrapper around a handle to a font
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFont.#ctor(System.IntPtr,System.String,System.Int32)">
            <summary>
                Class constructor
            </summary>
            <param name="hFont">A handle to an existing font.</param>
            <param name="faceName">Name of the font face.</param>
            <param name="height">Font height in GDI units</param>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFont.Finalize">
            <summary>
                Class destructor
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFont.CreateFont(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Creates a font based on the supplied typeface name and size.
            </summary>
            <param name="faceName">The typeface name of a font.</param>
            <param name="height">
                The height, in logical units, of the font's character 
                cell or character.
            </param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.Gdi.GdiFont.CreateDesignFont(System.String,System.Boolean,System.Boolean,WW.Pdf.Font.Gdi.GdiDeviceContent)">
            <summary>
                Creates a font whose height is equal to the negative value 
                of the EM Square
            </summary>
            <param name="faceName">The typeface name of a font.</param>
            <returns></returns>
        </member>
        <member name="T:WW.Pdf.Font.FontFileWriter">
            <summary>
                A specialised stream writer for creating OpenType fonts.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontFileWriter.OffsetTableSize">
            <summary>
                Size of the offset table in bytes.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontFileWriter.stream">
            <summary>
                The underlying stream.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontFileWriter.tables">
            <summary>
                List of font tables to write.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.#ctor(System.IO.Stream)">
            <summary>
                Creates a new instance of the <see cref="T:WW.Pdf.Font.FontFileWriter"/> class
                using <i>stream</i> as the underlying stream object.
            </summary>
            <param name="stream"></param>
            <exception cref="T:System.ArgumentException">
                If <i>stream</i> is not writable.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                If <i>streamm</i> is a null reference.
            </exception>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.Write(WW.Pdf.Font.TrueType.FontTable)">
            <summary>
                Queues the supplied <see cref="T:WW.Pdf.Font.TrueType.FontTable"/> for writing 
                to the underlying stream.
            </summary>
            <remarks>
                The method will not immediately write the supplied font 
                table to the underlying stream.  Instead it queues the 
                font table since the offset table must be written out 
                before any tables.
            </remarks>
            <param name="table"></param>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.Close">
            <summary>
                Writes the header and font tables to the underlying stream.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.WriteChecksumAdjustment">
            <summary>
                Updates the checkSumAdjustment field in the head table.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.WriteTables">
            <summary>
                Writes out each table to the font stream.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.WriteOffsetTable">
            <summary>
                Writes the offset table that appears at the beginning of 
                every TrueType/OpenType font.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.SkipTableDirectory">
            <summary>
                Does not actually write the table directory - simply "allocates"
                space for it in the stream.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.MaxPow2(System.Int32)">
            <summary>
                Returns the maximum power of 2 &lt;= max
            </summary>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.CalculateCheckSumAdjustment">
            <summary>
                Calculates the checksum of the entire font.
            </summary>
            <remarks>
                The underlying <see cref="T:WW.Pdf.Font.FontFileStream"/> must be aligned on
                a 4-byte boundary.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileWriter.CalculateCheckSum(System.Int64)">
            <summary>
                Calculates the checksum of a <see cref="T:WW.Pdf.Font.TrueType.FontTable"/>.
            </summary>
            <remarks>
                The supplied <i>stream</i> must be positioned at the beginning of 
                the table.
            </remarks>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.FontFileWriter.Stream">
            <summary>
                Gets the underlying <see cref="T:WW.Pdf.Font.FontFileStream"/>.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.FontFileReader">
            <summary>
                Class designed to parse a TrueType font file.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontFileReader.stream">
            <summary>
                A Big Endian stream.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontFileReader.fontName">
            <summary>
                Used to identity a font within a TrueType collection.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontFileReader.header">
            <summary>
                Maps a table name (4-character string) to a <see cref="T:WW.Pdf.Font.TrueType.Entries.DirectoryEntry"/>
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontFileReader.tableCache">
            <summary>
                A dictionary of cached <see cref="T:WW.Pdf.Font.TrueType.FontTable"/> instances.  
                The index is the table name.
            </summary>
        </member>
        <member name="F:WW.Pdf.Font.FontFileReader.mappings">
            <summary>
                Maps a glyph index to a subset index.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontFileReader.#ctor(System.IO.MemoryStream)">
            <summary>
                Class constructor.
            </summary>
            <param name="stream">Font data stream.</param>
        </member>
        <member name="M:WW.Pdf.Font.FontFileReader.#ctor(System.IO.MemoryStream,System.String)">
            <summary>
                Class constructor.
            </summary>
            <param name="stream">Font data stream.</param>
            <param name="fontName">Name of a font in a TrueType collection.</param>
        </member>
        <member name="M:WW.Pdf.Font.FontFileReader.ContainsTable(System.String)">
            <summary>
                Gets a value indicating whether or not this font contains the 
                supplied table.
            </summary>
            <param name="tableName">A table name.</param>
            <returns></returns>
        </member>
        <member name="M:WW.Pdf.Font.FontFileReader.GetTable(System.String,System.Boolean)">
            <summary>
                Gets a reference to the table structure identified by <i>tableName</i>
            </summary>
            <remarks>
                Only the following tables are supported: 
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Head"/> - Font header,
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Hhea"/> - Horizontal header,
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Hmtx"/> - Horizontal metrics,
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Maxp"/> - Maximum profile,
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Loca"/> - Index to location, 
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Glyf"/> - Glyf data,
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Cvt"/> - Control value,
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Prep"/> - Control value program,
                <see cref="F:WW.Pdf.Font.TrueType.TableNames.Fpgm"/> - Font program
            </remarks>
            <param name="tableName">A 4-character code identifying a table.</param>
            <exception cref="T:System.ArgumentException">
                If <b>tableName</b> does not represent a table in this font.
            </exception>
        </member>
        <member name="M:WW.Pdf.Font.FontFileReader.GetDictionaryEntry(System.String)">
            <summary>
                Gets a <see cref="T:WW.Pdf.Font.TrueType.Entries.DirectoryEntry"/> object for the supplied table.
            </summary>
            <param name="tableName">A 4-character code identifying a table.</param>
            <returns>
                A <see cref="T:WW.Pdf.Font.TrueType.Entries.DirectoryEntry"/> object or null if the table cannot 
                be located.
            </returns>
            <exception cref="T:System.ArgumentException">
                If <b>tag</b> does not represent a table in this font.
            </exception>
        </member>
        <member name="M:WW.Pdf.Font.FontFileReader.ReadTableHeaders">
            <summary>
                Reads the Offset and Directory tables.  If the FontFileStream represents 
                a TrueType collection, this method will look for the aforementioned 
                tables belonging to <i>fontName</i>.
            </summary>
            <remarks>
                This method can handle a TrueType collection.
            </remarks>
        </member>
        <member name="M:WW.Pdf.Font.FontFileReader.ReadRequiredTables">
            <summary>
                Caches the following tables: 'head', 'hhea', 'maxp', 'loca'
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.FontFileReader.OffsetStream(WW.Pdf.Font.TrueType.Entries.DirectoryEntry)">
            <summary>
                Sets the stream position to the offset in the supplied directory
                entry. Also ensures that the FontFileStream has enough bytes 
                available to read a font table.  Throws an exception if this 
                condition is not met.
            </summary>
            <param name="entry"></param>
            <exception cref="T:System.ArgumentException">
                If the supplied stream does not contain enough data.
            </exception>
        </member>
        <member name="P:WW.Pdf.Font.FontFileReader.IndexMappings">
            <summary>
                Gets or sets a dictionary containing glyph index to subset 
                index mappings.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.FontFileReader.Stream">
            <summary>
                Gets the underlying <see cref="T:WW.Pdf.Font.FontFileStream"/>.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.FontFileReader.TableCount">
            <summary>
                Gets the number tables.
            </summary>
        </member>
        <member name="T:WW.Pdf.Font.BfEntryList">
            <summary>
                A collection of <see cref="T:WW.Pdf.Font.BfEntry"/> instances.
            </summary>
        </member>
        <member name="M:WW.Pdf.Font.BfEntryList.Add(WW.Pdf.Font.BfEntry)">
            <summary>
                Adds the supplied <see cref="T:WW.Pdf.Font.BfEntry"/> to the end of the collection.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:WW.Pdf.Font.BfEntryList.GetEnumerator">
            <summary>
                Returns an ArrayList enumerator that references a read-only version
                of the BfEntry list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.BfEntryList.Item(System.Int32)">
            <summary>
                Gets the <see cref="T:WW.Pdf.Font.BfEntry"/> at <i>index</i>.
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.BfEntryList.Count">
            <summary>
                Gets the number of <see cref="T:WW.Pdf.Font.BfEntry"/> objects contained by this 
                <see cref="T:WW.Pdf.Font.BfEntryList"/>
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.BfEntryList.NumRanges">
            <summary>
                Returns the number of <see cref="T:WW.Pdf.Font.BfEntry"/> instances that 
                represent bfrange's
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.BfEntryList.Ranges">
            <summary>
                
            </summary>
        </member>
        <member name="P:WW.Pdf.Font.BfEntryList.NumChars">
            <summary>
                Returns the number of <see cref="T:WW.Pdf.Font.BfEntry"/> instances that 
                represent bfchar's
            </summary>
            <returns></returns>
        </member>
        <member name="P:WW.Pdf.Font.BfEntryList.Chars">
            <summary>
                
            </summary>
        </member>
        <member name="T:WW.Pdf.Components.PdfResourceDictionary">
            <summary>
            Represents a resource dictionary.
            </summary>
        </member>
        <member name="M:WW.Pdf.Components.PdfResourceDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WW.Pdf.Components.PdfResourceDictionary"/> class.
            </summary>
        </member>
        <member name="P:WW.Pdf.Components.PdfResourceDictionary.Properties">
            <summary>
            Gets or sets the name of optional content group.
            </summary>
        </member>
    </members>
</doc>
